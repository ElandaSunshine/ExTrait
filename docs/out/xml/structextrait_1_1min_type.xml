<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="structextrait_1_1min_type" kind="struct" language="C++" prot="public">
    <compoundname>extrait::minType</compoundname>
    <basecompoundref refid="structextrait_1_1detail_1_1minmax" prot="public" virt="non-virtual">extrait::detail::minmax&lt; T, Comparator, false &gt;</basecompoundref>
    <includes refid="type__list_8h" local="no">type_list.h</includes>
    <templateparamlist>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref></type>
      </param>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">template</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> &gt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref></type>
        <declname>Comparator</declname>
        <defname>Comparator</defname>
      </param>
    </templateparamlist>
    <briefdescription>
<para>Gets the minimum type in a parameter-list. </para>
    </briefdescription>
    <detaileddescription>
<para>Provides a member alias &quot;type&quot; that is one of the types that was compared to all other types in the parameter-list of class template instantiation T and based on the given type Comparator, was evaluated to be the smallest among them.</para>
<para>Where Comparator is a class template that takes two types as arguments, where the first argument is a type that in the current comparison pass is compared to the key type and the second argument is the key type that is compared to the type in the next comparison pass, this class template must provide a static constant expression &quot;value&quot; that determines true if the first argument is smaller than the second argument (key). <linebreak/>
 If there are several types with an equal result, the first encountered type will be taken.</para>
<para>If T is not a class template or is a class template with at least one non-type template parameter, compilation will fail.</para>
<para>Any modification to T, such as pointer, reference, array or cv-qualification of the original type, will render the type a non-class template type and compilation will fail. <linebreak/>
 In these cases you can use <ref refid="structextrait_1_1strip" kindref="compound">extrait::strip</ref> to strip any of these modifications off the type beforehand.</para>
<para>Adding custom template specialisations to this template results in undefined behaviour.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Any valid type-only class template instantiation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Comparator</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type satisfying a valid comparing type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="structextrait_1_1strip" kindref="compound">extrait::strip</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structextrait_1_1instantiates_class_template" kindref="compound">extrait::instantiatesClassTemplate</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structextrait_1_1_type_array" kindref="compound">extrait::T</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>extrait::minType&lt; T, Comparator &gt;</label>
        <link refid="structextrait_1_1min_type"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>extrait::detail::minmax&lt; T, Comparator, false &gt;</label>
        <link refid="structextrait_1_1detail_1_1minmax"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>extrait::minType&lt; T, Comparator &gt;</label>
        <link refid="structextrait_1_1min_type"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>extrait::detail::minmax&lt; T, Comparator, false &gt;</label>
        <link refid="structextrait_1_1detail_1_1minmax"/>
      </node>
    </collaborationgraph>
    <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1703" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1703" bodyend="1703"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
