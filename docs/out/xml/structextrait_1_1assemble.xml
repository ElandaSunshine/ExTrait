<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="structextrait_1_1assemble" kind="struct" language="C++" prot="public">
    <compoundname>extrait::assemble</compoundname>
    <basecompoundref refid="structextrait_1_1detail_1_1assemble" prot="public" virt="non-virtual">extrait::detail::assemble&lt; T, Branches... &gt;</basecompoundref>
    <includes refid="common_8h" local="no">common.h</includes>
    <templateparamlist>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">template</ref>&lt; class... &gt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref></type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> ...</type>
        <declname>Branches</declname>
        <defname>Branches</defname>
      </param>
    </templateparamlist>
    <briefdescription>
<para>Assembles a parameter-list based on conditions. </para>
    </briefdescription>
    <detaileddescription>
<para>Evaluates instantiations of <ref refid="structextrait_1_1branch" kindref="compound">extrait::branch</ref> in list Branches and provides a new instantiation of class template T with a parameter-list consisting of the associated branch types that evaluated to true and all given non-branch types.<linebreak/>
 If a type in list Branches is a non-branch type, this type will inevitably end up in the resulting parameter-list at the position it was specified in.</para>
<para>Adding custom template specialisations to this template results in undefined behaviour.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Any valid type-only class template that can take enough arguments </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Branches</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of <ref refid="structextrait_1_1branch" kindref="compound">extrait::branch</ref> instantiations or optionally other types</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="structextrait_1_1select" kindref="compound">extrait::select</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>extrait::detail::assemble&lt; T, Branches... &gt;</label>
        <link refid="structextrait_1_1detail_1_1assemble"/>
      </node>
      <node id="1">
        <label>extrait::assemble&lt; T, Branches &gt;</label>
        <link refid="structextrait_1_1assemble"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>extrait::detail::assemble&lt; T, Branches... &gt;</label>
        <link refid="structextrait_1_1detail_1_1assemble"/>
      </node>
      <node id="1">
        <label>extrait::assemble&lt; T, Branches &gt;</label>
        <link refid="structextrait_1_1assemble"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" line="193" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" bodystart="193" bodyend="193"/>
    <listofallmembers>
      <member refid="structextrait_1_1detail_1_1assemble_1ae20b55979371df91e676707095eccef8" prot="public" virt="non-virtual"><scope>extrait::assemble</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
