<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="namespaceextrait" kind="namespace" language="C++">
    <compoundname>extrait</compoundname>
    <innerclass refid="structextrait_1_1add" prot="public">extrait::add</innerclass>
    <innerclass refid="structextrait_1_1add_if_absent" prot="public">extrait::addIfAbsent</innerclass>
    <innerclass refid="structextrait_1_1assemble" prot="public">extrait::assemble</innerclass>
    <innerclass refid="structextrait_1_1branch" prot="public">extrait::branch</innerclass>
    <innerclass refid="structextrait_1_1contains" prot="public">extrait::contains</innerclass>
    <innerclass refid="structextrait_1_1convert" prot="public">extrait::convert</innerclass>
    <innerclass refid="structextrait_1_1deduplicate" prot="public">extrait::deduplicate</innerclass>
    <innerclass refid="structextrait_1_1_empty_type" prot="public">extrait::EmptyType</innerclass>
    <innerclass refid="structextrait_1_1ends_with" prot="public">extrait::endsWith</innerclass>
    <innerclass refid="structextrait_1_1filter" prot="public">extrait::filter</innerclass>
    <innerclass refid="classextrait_1_1_function" prot="public">extrait::Function</innerclass>
    <innerclass refid="structextrait_1_1_function_3_01_func_01_4" prot="public">extrait::Function&lt; Func &gt;</innerclass>
    <innerclass refid="structextrait_1_1get" prot="public">extrait::get</innerclass>
    <innerclass refid="structextrait_1_1index_of" prot="public">extrait::indexOf</innerclass>
    <innerclass refid="structextrait_1_1insert" prot="public">extrait::insert</innerclass>
    <innerclass refid="structextrait_1_1instantiates_class_template" prot="public">extrait::instantiatesClassTemplate</innerclass>
    <innerclass refid="structextrait_1_1instantiates_same_class_template" prot="public">extrait::instantiatesSameClassTemplate</innerclass>
    <innerclass refid="structextrait_1_1is_const_qualified" prot="public">extrait::isConstQualified</innerclass>
    <innerclass refid="structextrait_1_1is_empty" prot="public">extrait::isEmpty</innerclass>
    <innerclass refid="structextrait_1_1is_empty_instantiated" prot="public">extrait::isEmptyInstantiated</innerclass>
    <innerclass refid="structextrait_1_1is_lvalue_qualified" prot="public">extrait::isLvalueQualified</innerclass>
    <innerclass refid="structextrait_1_1is_member_function" prot="public">extrait::isMemberFunction</innerclass>
    <innerclass refid="structextrait_1_1is_rvalue_qualified" prot="public">extrait::isRvalueQualified</innerclass>
    <innerclass refid="structextrait_1_1is_volatile_qualified" prot="public">extrait::isVolatileQualified</innerclass>
    <innerclass refid="structextrait_1_1_iterator_end" prot="public">extrait::IteratorEnd</innerclass>
    <innerclass refid="structextrait_1_1join" prot="public">extrait::join</innerclass>
    <innerclass refid="structextrait_1_1last_index_of" prot="public">extrait::lastIndexOf</innerclass>
    <innerclass refid="structextrait_1_1length" prot="public">extrait::length</innerclass>
    <innerclass refid="structextrait_1_1map" prot="public">extrait::map</innerclass>
    <innerclass refid="structextrait_1_1match" prot="public">extrait::match</innerclass>
    <innerclass refid="structextrait_1_1match_all" prot="public">extrait::matchAll</innerclass>
    <innerclass refid="structextrait_1_1match_any" prot="public">extrait::matchAny</innerclass>
    <innerclass refid="structextrait_1_1match_none" prot="public">extrait::matchNone</innerclass>
    <innerclass refid="structextrait_1_1max_type" prot="public">extrait::maxType</innerclass>
    <innerclass refid="structextrait_1_1min_type" prot="public">extrait::minType</innerclass>
    <innerclass refid="structextrait_1_1mismatch" prot="public">extrait::mismatch</innerclass>
    <innerclass refid="structextrait_1_1move" prot="public">extrait::move</innerclass>
    <innerclass refid="structextrait_1_1_overload" prot="public">extrait::Overload</innerclass>
    <innerclass refid="structextrait_1_1_overload_3_01_signature_00_01std_1_1void__t_3_01decltype_07std_1_1declval_3_016a692dd87d6f7e08026643d8e9570858" prot="public">extrait::Overload&lt; Signature, std::void_t&lt; decltype(std::declval&lt; Signature * &gt;())&gt; &gt;</innerclass>
    <innerclass refid="structextrait_1_1owner_type" prot="public">extrait::ownerType</innerclass>
    <innerclass refid="structextrait_1_1parameter_count" prot="public">extrait::parameterCount</innerclass>
    <innerclass refid="structextrait_1_1parameter_list" prot="public">extrait::parameterList</innerclass>
    <innerclass refid="structextrait_1_1reinstantiate" prot="public">extrait::reinstantiate</innerclass>
    <innerclass refid="structextrait_1_1remove" prot="public">extrait::remove</innerclass>
    <innerclass refid="structextrait_1_1remove_all" prot="public">extrait::removeAll</innerclass>
    <innerclass refid="structextrait_1_1remove_at" prot="public">extrait::removeAt</innerclass>
    <innerclass refid="structextrait_1_1remove_if" prot="public">extrait::removeIf</innerclass>
    <innerclass refid="structextrait_1_1remove_range" prot="public">extrait::removeRange</innerclass>
    <innerclass refid="structextrait_1_1replace" prot="public">extrait::replace</innerclass>
    <innerclass refid="structextrait_1_1replace_all" prot="public">extrait::replaceAll</innerclass>
    <innerclass refid="structextrait_1_1replace_at" prot="public">extrait::replaceAt</innerclass>
    <innerclass refid="structextrait_1_1replace_if" prot="public">extrait::replaceIf</innerclass>
    <innerclass refid="structextrait_1_1replace_if_not" prot="public">extrait::replaceIfNot</innerclass>
    <innerclass refid="structextrait_1_1replace_range" prot="public">extrait::replaceRange</innerclass>
    <innerclass refid="structextrait_1_1return_type" prot="public">extrait::returnType</innerclass>
    <innerclass refid="structextrait_1_1reverse" prot="public">extrait::reverse</innerclass>
    <innerclass refid="structextrait_1_1_reverse_type_iterator" prot="public">extrait::ReverseTypeIterator</innerclass>
    <innerclass refid="structextrait_1_1_reverse_type_iterator_3_01_type_array_3_01_types_8_8_8_01_4_00_01_index_01_4" prot="public">extrait::ReverseTypeIterator&lt; T&lt; Types... &gt;, Index &gt;</innerclass>
    <innerclass refid="structextrait_1_1_reverse_type_iterator_3_01_type_array_3_01_types_8_8_8_01_4_00_01sizeof_8_8_8_07_types_08_4" prot="public">extrait::ReverseTypeIterator&lt; T&lt; Types... &gt;, sizeof...(Types)&gt;</innerclass>
    <innerclass refid="structextrait_1_1rotate" prot="public">extrait::rotate</innerclass>
    <innerclass refid="structextrait_1_1same_template_arguments" prot="public">extrait::sameTemplateArguments</innerclass>
    <innerclass refid="structextrait_1_1select" prot="public">extrait::select</innerclass>
    <innerclass refid="structextrait_1_1sort" prot="public">extrait::sort</innerclass>
    <innerclass refid="structextrait_1_1starts_with" prot="public">extrait::startsWith</innerclass>
    <innerclass refid="structextrait_1_1strip" prot="public">extrait::strip</innerclass>
    <innerclass refid="structextrait_1_1sublist" prot="public">extrait::sublist</innerclass>
    <innerclass refid="structextrait_1_1swap" prot="public">extrait::swap</innerclass>
    <innerclass refid="structextrait_1_1to_type_array" prot="public">extrait::toTypeArray</innerclass>
    <innerclass refid="structextrait_1_1to_type_array_3_01_t_3_01_types_8_8_8_01_4_01_4" prot="public">extrait::toTypeArray&lt; T&lt; Types... &gt; &gt;</innerclass>
    <innerclass refid="structextrait_1_1_type_array" prot="public">extrait::T</innerclass>
    <innerclass refid="structextrait_1_1_type_array_index" prot="public">extrait::TypeArrayIndex</innerclass>
    <innerclass refid="structextrait_1_1type_constant" prot="public">extrait::typeConstant</innerclass>
    <innerclass refid="structextrait_1_1_type_iterator" prot="public">extrait::TypeIterator</innerclass>
    <innerclass refid="structextrait_1_1_type_iterator_3_01_type_array_3_01_types_8_8_8_01_4_00_01_index_01_4" prot="public">extrait::TypeIterator&lt; T&lt; Types... &gt;, Index &gt;</innerclass>
    <innerclass refid="structextrait_1_1_type_iterator_3_01_type_array_3_01_types_8_8_8_01_4_00_01sizeof_8_8_8_07_types_08_4" prot="public">extrait::TypeIterator&lt; T&lt; Types... &gt;, sizeof...(Types)&gt;</innerclass>
    <innerclass refid="structextrait_1_1_type_view" prot="public">extrait::TypeView</innerclass>
    <innerclass refid="structextrait_1_1_value_view" prot="public">extrait::ValueView</innerclass>
    <innernamespace refid="namespaceextrait_1_1detail">extrait::detail</innernamespace>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="common_8h_1addf0cd2d78f9d6e41d739b39b7ef5ba2" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1strip" kindref="compound">strip</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref> &gt;::type</type>
        <definition>using extrait::strip_t =  typename strip&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>strip_t</name>
        <qualifiedname>extrait::strip_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1strip" kindref="compound">extrait::strip</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" line="91" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="common_8h_1a6ba49602a991431d5274a29e1a5e5b61" prot="public" static="no">
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">int</ref></type>
        <definition>using extrait::index_t =  int</definition>
        <argsstring></argsstring>
        <name>index_t</name>
        <qualifiedname>extrait::index_t</qualifiedname>
        <briefdescription>
<para>An alias for int, representing a type that can take any (theorethical) index value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" line="104" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="common_8h_1a4ec07b2008107f54304e4dcd07ef8d5b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>index_t</type>
            <declname>Index</declname>
            <defname>Index</defname>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; <ref refid="common_8h_1a6ba49602a991431d5274a29e1a5e5b61" kindref="member">index_t</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Index</ref> &gt;</type>
        <definition>using extrait::indexConstant =  std::integral_constant&lt;index_t, Index&gt;</definition>
        <argsstring></argsstring>
        <name>indexConstant</name>
        <qualifiedname>extrait::indexConstant</qualifiedname>
        <briefdescription>
<para>An alias for std::integral_constant specialised for <ref refid="common_8h_1a6ba49602a991431d5274a29e1a5e5b61" kindref="member">extrait::index_t</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" line="111" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="common_8h_1a837bed0c30459314db95ff17a19993de" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class ...</type>
            <declname>Branches</declname>
            <defname>Branches</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1select" kindref="compound">select</ref>&lt; Branches... &gt;::type</type>
        <definition>using extrait::select_t =  typename select&lt;Branches...&gt;::type</definition>
        <argsstring></argsstring>
        <name>select_t</name>
        <qualifiedname>extrait::select_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1select" kindref="compound">extrait::select</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" line="173" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="common_8h_1ad17992b15c8062cf818daebfb502cb9a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>class ...</type>
            <declname>Branches</declname>
            <defname>Branches</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1assemble" kindref="compound">assemble</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, Branches... &gt;::type</type>
        <definition>using extrait::assemble_t =  typename assemble&lt;T, Branches...&gt;::type</definition>
        <argsstring></argsstring>
        <name>assemble_t</name>
        <qualifiedname>extrait::assemble_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1assemble" kindref="compound">extrait::assemble</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" line="199" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="reflection_8h_1a86eff14fcd27d6154cc1f36885c78e14" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Ret</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>Parameters</declname>
            <defname>Parameters</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Ret</ref>(*)(Parameters...)</type>
        <definition>using extrait::FunctionPointer_t =  Ret(*)(Parameters...)</definition>
        <argsstring></argsstring>
        <name>FunctionPointer_t</name>
        <qualifiedname>extrait::FunctionPointer_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A convenience type wrapper for function pointers.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Ret</parametername>
</parameternamelist>
<parameterdescription>
<para>The return type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>The function arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="152" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="reflection_8h_1a2bd3dcb30b1d6610941c10ff84ba4423" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Ret</type>
          </param>
          <param>
            <type>class Owner</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>Parameters</declname>
            <defname>Parameters</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Ret</ref>(Owner::*)(Parameters...)</type>
        <definition>using extrait::MemberFunctionPointer_t =  Ret(Owner::*)(Parameters...)</definition>
        <argsstring></argsstring>
        <name>MemberFunctionPointer_t</name>
        <qualifiedname>extrait::MemberFunctionPointer_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A convenience type wrapper for pointer-to-member functions.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Ret</parametername>
</parameternamelist>
<parameterdescription>
<para>The return type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Owner</parametername>
</parameternamelist>
<parameterdescription>
<para>The owner type of the member-function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>The function arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="162" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="reflection_8h_1a5c4ccd9a84744a349e9ec3806a46926a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Owner</type>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref> Owner::*</type>
        <definition>using extrait::MemberObjectPointer_t =  T Owner::*</definition>
        <argsstring></argsstring>
        <name>MemberObjectPointer_t</name>
        <qualifiedname>extrait::MemberObjectPointer_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A convenience type-wrapper for pointer-to-member objects.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The object&apos;s type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Owner</parametername>
</parameternamelist>
<parameterdescription>
<para>The owner type of the member-object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="171" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="reflection_8h_1a1c44dc5e06d4746828968d341ba9edb5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>auto</type>
            <declname>Func</declname>
            <defname>Func</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1parameter_list" kindref="compound">parameterList</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Func</ref> &gt;::type</type>
        <definition>using extrait::parameterList_t =  typename parameterList&lt;Func&gt;::type</definition>
        <argsstring></argsstring>
        <name>parameterList_t</name>
        <qualifiedname>extrait::parameterList_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets an <ref refid="structextrait_1_1_type_array" kindref="compound">extrait::T</ref> that consists of the types of the parameters of the given function. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function pointer   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="486" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="486" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="reflection_8h_1a78cbf8531a0ea67be6fa52247732a07a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>auto</type>
            <declname>Func</declname>
            <defname>Func</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1return_type" kindref="compound">returnType</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Func</ref> &gt;::type</type>
        <definition>using extrait::returnType_t =  typename returnType&lt;Func&gt;::type</definition>
        <argsstring></argsstring>
        <name>returnType_t</name>
        <qualifiedname>extrait::returnType_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the return type of a function pointer. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function pointer   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="497" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="497" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="reflection_8h_1a8139447549798c8c6b9e50c492722a26" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>auto</type>
            <declname>Func</declname>
            <defname>Func</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1owner_type" kindref="compound">ownerType</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Func</ref> &gt;::type</type>
        <definition>using extrait::ownerType_t =  typename ownerType&lt;Func&gt;::type</definition>
        <argsstring></argsstring>
        <name>ownerType_t</name>
        <qualifiedname>extrait::ownerType_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the owner of a function pointer if the function is a member function, otherwise returns std::nullptr_t. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function pointer   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="508" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__container_8h_1a89eae85411cf78c554977c93a88419f2" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1to_type_array" kindref="compound">toTypeArray</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref> &gt;::type</type>
        <definition>using extrait::toTypeArray_t =  typename toTypeArray&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>toTypeArray_t</name>
        <qualifiedname>extrait::toTypeArray_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts any type-list to a <ref refid="structextrait_1_1_type_array" kindref="compound">extrait::T</ref>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type-list to convert   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_container.h" line="85" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_container.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a793b6a7e76ba0b9bb75cb3539d6c5b77" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>class ...</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1join" kindref="compound">join</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, U... &gt;::type</type>
        <definition>using extrait::join_t =  typename join&lt;T, U...&gt;::type</definition>
        <argsstring></argsstring>
        <name>join_t</name>
        <qualifiedname>extrait::join_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1join" kindref="compound">extrait::join</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="664" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="664" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a26450a1e6241565cdcd12fb7556af299" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1reverse" kindref="compound">reverse</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref> &gt;::type</type>
        <definition>using extrait::reverse_t =  typename reverse&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>reverse_t</name>
        <qualifiedname>extrait::reverse_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1reverse" kindref="compound">extrait::reverse</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="695" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="695" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1ae4a986b9ea4b99b5f9bf21e4c72d6719" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>index_t</type>
            <declname>Start</declname>
            <defname>Start</defname>
          </param>
          <param>
            <type>index_t</type>
            <declname>End</declname>
            <defname>End</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1sublist" kindref="compound">sublist</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Start</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">End</ref> &gt;::type</type>
        <definition>using extrait::sublist_t =  typename sublist&lt;T, Start, End&gt;::type</definition>
        <argsstring></argsstring>
        <name>sublist_t</name>
        <qualifiedname>extrait::sublist_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1sublist" kindref="compound">extrait::sublist</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="734" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="734" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1aaea2b4f65e4c5500820eed685ca12365" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>index_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1get" kindref="compound">get</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">I</ref> &gt;::type</type>
        <definition>using extrait::get_t =  typename get&lt;T, I&gt;::type</definition>
        <argsstring></argsstring>
        <name>get_t</name>
        <qualifiedname>extrait::get_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1get" kindref="compound">extrait::get</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="773" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="773" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a8acbf7b59a67e22af001d80cc5d4dca9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="type__list_8h_1aaea2b4f65e4c5500820eed685ca12365" kindref="member">get_t</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, 0 &gt;</type>
        <definition>using extrait::first_t =  get_t&lt;T, 0&gt;</definition>
        <argsstring></argsstring>
        <name>first_t</name>
        <qualifiedname>extrait::first_t</qualifiedname>
        <briefdescription>
<para>Type helper that refers to the first template argument in the template parameter-list of T. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="779" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="779" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a463f90b65dcac09ddc9ade9195a0a5c3" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="type__list_8h_1aaea2b4f65e4c5500820eed685ca12365" kindref="member">get_t</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>,(<ref refid="type__list_8h_1aeceb00ee7290175462d337fbbf2e5acf" kindref="member">length_v</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref> &gt; - 1)&gt;</type>
        <definition>using extrait::last_t =  get_t&lt;T, (length_v&lt;T&gt; - 1)&gt;</definition>
        <argsstring></argsstring>
        <name>last_t</name>
        <qualifiedname>extrait::last_t</qualifiedname>
        <briefdescription>
<para>Type helper that refers to the last template argument in the template parameter-list of T. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="785" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="785" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1abccb4294354146b461f0b417342de173" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Key</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>Replacement</declname>
            <defname>Replacement</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1replace" kindref="compound">replace</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Key</ref>, Replacement... &gt;::type</type>
        <definition>using extrait::replace_t =  typename replace&lt;T, Key, Replacement...&gt;::type</definition>
        <argsstring></argsstring>
        <name>replace_t</name>
        <qualifiedname>extrait::replace_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1replace" kindref="compound">extrait::replace</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="825" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="825" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a57213117efa65d614e5c94a1de11a76c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Key</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>Replacement</declname>
            <defname>Replacement</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1replace_all" kindref="compound">replaceAll</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Key</ref>, Replacement... &gt;::type</type>
        <definition>using extrait::replaceAll_t =  typename replaceAll&lt;T, Key, Replacement...&gt;::type</definition>
        <argsstring></argsstring>
        <name>replaceAll_t</name>
        <qualifiedname>extrait::replaceAll_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1replace_all" kindref="compound">extrait::replaceAll</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="865" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="865" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a79d013b31b6fd0783ec488f80e867bd6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>index_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>class ...</type>
            <declname>Replacement</declname>
            <defname>Replacement</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1replace_at" kindref="compound">replaceAt</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">I</ref>, Replacement... &gt;::type</type>
        <definition>using extrait::replaceAt_t =  typename replaceAt&lt;T, I, Replacement...&gt;::type</definition>
        <argsstring></argsstring>
        <name>replaceAt_t</name>
        <qualifiedname>extrait::replaceAt_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1replace_at" kindref="compound">extrait::replaceAt</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="911" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="911" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a054ede9855b3e2aa66785d2d88c3cb8b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>Replacement</declname>
            <defname>Replacement</defname>
          </param>
        </templateparamlist>
        <type><ref refid="type__list_8h_1a79d013b31b6fd0783ec488f80e867bd6" kindref="member">replaceAt_t</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, 0, Replacement... &gt;</type>
        <definition>using extrait::replaceFirst_t =  replaceAt_t&lt;T, 0, Replacement...&gt;</definition>
        <argsstring></argsstring>
        <name>replaceFirst_t</name>
        <qualifiedname>extrait::replaceFirst_t</qualifiedname>
        <briefdescription>
<para>Type helper that replaces the first template argument in the template parameter-list of T. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="917" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="917" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a6ea0349716a89bed7f65937ffb9836a0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>Replacement</declname>
            <defname>Replacement</defname>
          </param>
        </templateparamlist>
        <type><ref refid="type__list_8h_1a79d013b31b6fd0783ec488f80e867bd6" kindref="member">replaceAt_t</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>,(<ref refid="type__list_8h_1aeceb00ee7290175462d337fbbf2e5acf" kindref="member">length_v</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref> &gt; - 1), Replacement... &gt;</type>
        <definition>using extrait::replaceLast_t =  replaceAt_t&lt;T, (length_v&lt;T&gt; - 1), Replacement...&gt;</definition>
        <argsstring></argsstring>
        <name>replaceLast_t</name>
        <qualifiedname>extrait::replaceLast_t</qualifiedname>
        <briefdescription>
<para>Type helper that replaces the last template argument in the template parameter-list of T. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="923" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="923" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1ac747689277c933bf5dbc5b816f7b4003" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>index_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>class NewT</type>
          </param>
        </templateparamlist>
        <type><ref refid="type__list_8h_1a79d013b31b6fd0783ec488f80e867bd6" kindref="member">replaceAt_t</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">I</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">NewT</ref> &gt;</type>
        <definition>using extrait::set_t =  replaceAt_t&lt;T, I, NewT&gt;</definition>
        <argsstring></argsstring>
        <name>set_t</name>
        <qualifiedname>extrait::set_t</qualifiedname>
        <briefdescription>
<para>Type helper that sets a type at a certain index to another singular type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="929" column="6" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="929" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a213677cd0fa659676e4bba9f06b9a0e5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>index_t</type>
            <declname>Start</declname>
            <defname>Start</defname>
          </param>
          <param>
            <type>index_t</type>
            <declname>End</declname>
            <defname>End</defname>
          </param>
          <param>
            <type>class ...</type>
            <declname>Replacement</declname>
            <defname>Replacement</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1replace_range" kindref="compound">replaceRange</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Start</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">End</ref>, Replacement... &gt;::type</type>
        <definition>using extrait::replaceRange_t =  typename replaceRange&lt;T, Start, End, Replacement...&gt;::type</definition>
        <argsstring></argsstring>
        <name>replaceRange_t</name>
        <qualifiedname>extrait::replaceRange_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1replace_range" kindref="compound">extrait::replaceRange</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="977" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="977" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a049d06e8a5f65ad16c908fc4392f5b5e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>template&lt; class &gt; class</type>
            <declname>Predicate</declname>
            <defname>Predicate</defname>
          </param>
          <param>
            <type>class ...</type>
            <declname>Replacement</declname>
            <defname>Replacement</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1replace_if" kindref="compound">replaceIf</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Predicate</ref>, Replacement... &gt;::type</type>
        <definition>using extrait::replaceIf_t =  typename replaceIf&lt;T, Predicate, Replacement...&gt;::type</definition>
        <argsstring></argsstring>
        <name>replaceIf_t</name>
        <qualifiedname>extrait::replaceIf_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1replace_if" kindref="compound">extrait::replaceIf</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1021" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1021" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1aa03f55be6dfd2238e89bea7165c1394f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>template&lt; class &gt; class</type>
            <declname>Predicate</declname>
            <defname>Predicate</defname>
          </param>
          <param>
            <type>class ...</type>
            <declname>Replacement</declname>
            <defname>Replacement</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1replace_if_not" kindref="compound">replaceIfNot</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Predicate</ref>, Replacement... &gt;::type</type>
        <definition>using extrait::replaceIfNot_t =  typename replaceIfNot&lt;T, Predicate, Replacement...&gt;::type</definition>
        <argsstring></argsstring>
        <name>replaceIfNot_t</name>
        <qualifiedname>extrait::replaceIfNot_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1replace_if_not" kindref="compound">extrait::replaceIfNot</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1064" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1064" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1adf6134aeb9d9f19aa53e203a645dff63" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Key</type>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1remove" kindref="compound">remove</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Key</ref> &gt;::type</type>
        <definition>using extrait::remove_t =  typename remove&lt;T, Key&gt;::type</definition>
        <argsstring></argsstring>
        <name>remove_t</name>
        <qualifiedname>extrait::remove_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1remove" kindref="compound">extrait::remove</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1102" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a404f8c7fb789c90ec632ec5ec66741b7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Key</type>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1remove_all" kindref="compound">removeAll</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Key</ref> &gt;::type</type>
        <definition>using extrait::removeAll_t =  typename removeAll&lt;T, Key&gt;::type</definition>
        <argsstring></argsstring>
        <name>removeAll_t</name>
        <qualifiedname>extrait::removeAll_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1remove_all" kindref="compound">extrait::removeAll</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1140" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1aefed03e200321df1876b6a49a71d4eaa" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>index_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1remove_at" kindref="compound">removeAt</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">I</ref> &gt;::type</type>
        <definition>using extrait::removeAt_t =  typename removeAt&lt;T, I&gt;::type</definition>
        <argsstring></argsstring>
        <name>removeAt_t</name>
        <qualifiedname>extrait::removeAt_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1remove_at" kindref="compound">extrait::removeAt</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1182" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a672dffe3da3f8302f15ed73a88cdea37" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="type__list_8h_1aefed03e200321df1876b6a49a71d4eaa" kindref="member">removeAt_t</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, 0 &gt;</type>
        <definition>using extrait::removeFirst_t =  removeAt_t&lt;T, 0&gt;</definition>
        <argsstring></argsstring>
        <name>removeFirst_t</name>
        <qualifiedname>extrait::removeFirst_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1remove_at" kindref="compound">extrait::removeAt</ref> that removes the first template argument in the template parameter-list of T. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1189" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1afeaa59086f6c6bf210aefdf3b57f81b0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="type__list_8h_1aefed03e200321df1876b6a49a71d4eaa" kindref="member">removeAt_t</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>,(<ref refid="type__list_8h_1aeceb00ee7290175462d337fbbf2e5acf" kindref="member">length_v</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref> &gt; - 1)&gt;</type>
        <definition>using extrait::removeLast_t =  removeAt_t&lt;T, (length_v&lt;T&gt; - 1)&gt;</definition>
        <argsstring></argsstring>
        <name>removeLast_t</name>
        <qualifiedname>extrait::removeLast_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1remove_at" kindref="compound">extrait::removeAt</ref> that removes the last template argument in the template parameter-list of T. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1196" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a1ecf1e6e5ba728a0d899a382b3f05ddd" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>index_t</type>
            <declname>Start</declname>
            <defname>Start</defname>
          </param>
          <param>
            <type>index_t</type>
            <declname>End</declname>
            <defname>End</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1remove_range" kindref="compound">removeRange</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Start</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">End</ref> &gt;::type</type>
        <definition>using extrait::removeRange_t =  typename removeRange&lt;T, Start, End&gt;::type</definition>
        <argsstring></argsstring>
        <name>removeRange_t</name>
        <qualifiedname>extrait::removeRange_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1remove_range" kindref="compound">extrait::removeRange</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1241" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a7d1a06c7627b365b9cef2eed906f31c9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>template&lt; class &gt; class</type>
            <declname>Predicate</declname>
            <defname>Predicate</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1remove_if" kindref="compound">removeIf</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Predicate</ref> &gt;::type</type>
        <definition>using extrait::removeIf_t =  typename removeIf&lt;T, Predicate&gt;::type</definition>
        <argsstring></argsstring>
        <name>removeIf_t</name>
        <qualifiedname>extrait::removeIf_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1remove_if" kindref="compound">extrait::removeIf</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1282" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1abb547423018d9b4f7d31d2551ce8ccf3" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>template&lt; class &gt; class</type>
            <declname>Predicate</declname>
            <defname>Predicate</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1filter" kindref="compound">filter</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Predicate</ref> &gt;::type</type>
        <definition>using extrait::filter_t =  typename filter&lt;T, Predicate&gt;::type</definition>
        <argsstring></argsstring>
        <name>filter_t</name>
        <qualifiedname>extrait::filter_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1filter" kindref="compound">extrait::filter</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1322" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a53adea3cf369087ba6459fae6f5025bb" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1deduplicate" kindref="compound">deduplicate</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref> &gt;::type</type>
        <definition>using extrait::deduplicate_t =  typename deduplicate&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>deduplicate_t</name>
        <qualifiedname>extrait::deduplicate_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1deduplicate" kindref="compound">extrait::deduplicate</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1354" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a994721ac553cf215c56eee7af916e34b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1add" kindref="compound">add</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, Types... &gt;::type</type>
        <definition>using extrait::add_t =  typename add&lt;T, Types...&gt;::type</definition>
        <argsstring></argsstring>
        <name>add_t</name>
        <qualifiedname>extrait::add_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1add" kindref="compound">extrait::add</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1389" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a0bdc0f9a1163f132b53c68c93b5d8976" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>Add</declname>
            <defname>Add</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1add_if_absent" kindref="compound">addIfAbsent</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, Add... &gt;::type</type>
        <definition>using extrait::addIfAbsent_t =  typename addIfAbsent&lt;T, Add...&gt;::type</definition>
        <argsstring></argsstring>
        <name>addIfAbsent_t</name>
        <qualifiedname>extrait::addIfAbsent_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1426" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a9dc409a613fbed78dde44b4a043be709" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>index_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>class ...</type>
            <declname>Add</declname>
            <defname>Add</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1insert" kindref="compound">insert</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">I</ref>, Add... &gt;::type</type>
        <definition>using extrait::insert_t =  typename insert&lt;T, I, Add...&gt;::type</definition>
        <argsstring></argsstring>
        <name>insert_t</name>
        <qualifiedname>extrait::insert_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1insert" kindref="compound">extrait::insert</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1468" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1468" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a486a7c24c7afcb56c36ca89f6fceca62" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>index_t</type>
            <declname>Start</declname>
            <defname>Start</defname>
          </param>
          <param>
            <type>index_t</type>
            <declname>Middle</declname>
            <defname>Middle</defname>
          </param>
          <param>
            <type>index_t</type>
            <declname>End</declname>
            <defname>End</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1rotate" kindref="compound">rotate</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Start</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Middle</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">End</ref> &gt;::type</type>
        <definition>using extrait::rotate_t =  typename rotate&lt;T, Start, Middle, End&gt;::type</definition>
        <argsstring></argsstring>
        <name>rotate_t</name>
        <qualifiedname>extrait::rotate_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1rotate" kindref="compound">extrait::rotate</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1508" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a728f1c342f1971ba9e913995cb406ea3" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>index_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>index_t</type>
            <declname>Dest</declname>
            <defname>Dest</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1move" kindref="compound">move</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">I</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Dest</ref> &gt;::type</type>
        <definition>using extrait::move_t =  typename move&lt;T, I, Dest&gt;::type</definition>
        <argsstring></argsstring>
        <name>move_t</name>
        <qualifiedname>extrait::move_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1move" kindref="compound">extrait::move</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1550" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1550" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a10470acb5abedc90593241ed0ec834db" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>index_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>index_t</type>
            <declname>Dest</declname>
            <defname>Dest</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1swap" kindref="compound">swap</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">I</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Dest</ref> &gt;::type</type>
        <definition>using extrait::swap_t =  typename swap&lt;T, I, Dest&gt;::type</definition>
        <argsstring></argsstring>
        <name>swap_t</name>
        <qualifiedname>extrait::swap_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1swap" kindref="compound">extrait::swap</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1590" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1590" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a3e338de41bf7e781aefcbee388fd5544" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>template&lt; class &gt; class</type>
            <declname>Mapper</declname>
            <defname>Mapper</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1map" kindref="compound">map</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Mapper</ref> &gt;::type</type>
        <definition>using extrait::map_t =  typename map&lt;T, Mapper&gt;::type</definition>
        <argsstring></argsstring>
        <name>map_t</name>
        <qualifiedname>extrait::map_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1map" kindref="compound">extrait::map</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1629" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1629" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1aaae5fd6d2c83248b1a88a8facfb84e46" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Comparator</declname>
            <defname>Comparator</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1sort" kindref="compound">sort</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Comparator</ref> &gt;::type</type>
        <definition>using extrait::sort_t =  typename sort&lt;T, Comparator&gt;::type</definition>
        <argsstring></argsstring>
        <name>sort_t</name>
        <qualifiedname>extrait::sort_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1sort" kindref="compound">extrait::sort</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1670" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a21d82cc1de914bf5d0b8cc095c64fe53" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Comparator</declname>
            <defname>Comparator</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1min_type" kindref="compound">minType</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Comparator</ref> &gt;::type</type>
        <definition>using extrait::minType_t =  typename minType&lt;T, Comparator&gt;::type</definition>
        <argsstring></argsstring>
        <name>minType_t</name>
        <qualifiedname>extrait::minType_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1min_type" kindref="compound">extrait::minType</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1709" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1709" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a397f43d02612520d39cac886cafa4126" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Comparator</declname>
            <defname>Comparator</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1max_type" kindref="compound">maxType</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Comparator</ref> &gt;::type</type>
        <definition>using extrait::maxType_t =  typename maxType&lt;T, Comparator&gt;::type</definition>
        <argsstring></argsstring>
        <name>maxType_t</name>
        <qualifiedname>extrait::maxType_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1max_type" kindref="compound">extrait::maxType</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1748" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1748" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a5a92a525c92bdea9893619996a5e3694" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1convert" kindref="compound">convert</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">U</ref> &gt;::type</type>
        <definition>using extrait::convert_t =  typename convert&lt;T, U&gt;::type</definition>
        <argsstring></argsstring>
        <name>convert_t</name>
        <qualifiedname>extrait::convert_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1convert" kindref="compound">extrait::convert</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1781" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1781" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1a2a268915a77509ee5d742f5aa71c7353" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1reinstantiate" kindref="compound">reinstantiate</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, Types... &gt;::type</type>
        <definition>using extrait::reinstantiate_t =  typename reinstantiate&lt;T, Types...&gt;::type</definition>
        <argsstring></argsstring>
        <name>reinstantiate_t</name>
        <qualifiedname>extrait::reinstantiate_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1reinstantiate" kindref="compound">extrait::reinstantiate</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1814" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1814" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="common_8h_1a1b030f296d81fb7b7556fa48b19ad112" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class ...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>const bool extrait::assertDep_type</definition>
        <argsstring></argsstring>
        <name>assertDep_type</name>
        <qualifiedname>extrait::assertDep_type</qualifiedname>
        <initializer>= <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">false</ref></initializer>
        <briefdescription>
<para>A helper for static_asserts that always evaluates to false, making the static_assert dependent on types T. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" line="119" column="27" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" bodystart="119" bodyend="-1" declfile="D:/Development/Coding/cpp/ExTrait/include/extrait/detail/common_impl.h" declline="60" declcolumn="23"/>
      </memberdef>
      <memberdef kind="variable" id="common_8h_1a0c0285ae8b344d34425d2a7c192bc440" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>auto ...</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>const bool extrait::assertDep_value</definition>
        <argsstring></argsstring>
        <name>assertDep_value</name>
        <qualifiedname>extrait::assertDep_value</qualifiedname>
        <initializer>= <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">false</ref></initializer>
        <briefdescription>
<para>A helper for static_asserts that always evaluates to false, making the static_assert dependent on values V. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" line="126" column="27" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" bodystart="126" bodyend="-1" declfile="D:/Development/Coding/cpp/ExTrait/include/extrait/detail/common_impl.h" declline="63" declcolumn="23"/>
      </memberdef>
      <memberdef kind="variable" id="reflection_8h_1a3f147bfaa7cddd8857c642fc8c3ea2a3" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>auto</type>
            <declname>Func</declname>
            <defname>Func</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">EXTRAIT_CONSTEXINI</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>EXTRAIT_CONSTEXINI bool extrait::isMemberFunction_v</definition>
        <argsstring></argsstring>
        <name>isMemberFunction_v</name>
        <qualifiedname>extrait::isMemberFunction_v</qualifiedname>
        <initializer>= <ref refid="structextrait_1_1is_member_function" kindref="compound">isMemberFunction</ref>&lt;<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Func</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets whether a given function pointer is a member function. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function pointer   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="412" column="29" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reflection_8h_1a5345cce9350f50686ee3c38004407432" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>auto</type>
            <declname>Func</declname>
            <defname>Func</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">EXTRAIT_CONSTEXINI</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>EXTRAIT_CONSTEXINI bool extrait::isConstQualified_v</definition>
        <argsstring></argsstring>
        <name>isConstQualified_v</name>
        <qualifiedname>extrait::isConstQualified_v</qualifiedname>
        <initializer>= <ref refid="structextrait_1_1is_const_qualified" kindref="compound">isConstQualified</ref>&lt;<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Func</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets whether a given function pointer is a const-qualified member function.<linebreak/>
 If the given function pointer is not a member-function, this will always return false.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function pointer   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="425" column="29" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reflection_8h_1ac3581782ae1d9df06424a0e197eaae1a" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>auto</type>
            <declname>Func</declname>
            <defname>Func</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">EXTRAIT_CONSTEXINI</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>EXTRAIT_CONSTEXINI bool extrait::isVolatileQualified_v</definition>
        <argsstring></argsstring>
        <name>isVolatileQualified_v</name>
        <qualifiedname>extrait::isVolatileQualified_v</qualifiedname>
        <initializer>= <ref refid="structextrait_1_1is_volatile_qualified" kindref="compound">isVolatileQualified</ref>&lt;<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Func</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets whether a given function pointer is a volatile-qualified member function.<linebreak/>
 If the given function pointer is not a member-function, this will always return false.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function pointer   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="438" column="29" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reflection_8h_1a324b6b431fb212a5f747178995dcf7c1" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>auto</type>
            <declname>Func</declname>
            <defname>Func</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">EXTRAIT_CONSTEXINI</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>EXTRAIT_CONSTEXINI bool extrait::isLvalueQualified_v</definition>
        <argsstring></argsstring>
        <name>isLvalueQualified_v</name>
        <qualifiedname>extrait::isLvalueQualified_v</qualifiedname>
        <initializer>= <ref refid="structextrait_1_1is_lvalue_qualified" kindref="compound">isLvalueQualified</ref>&lt;<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Func</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets whether a given function pointer is an lvalue-qualified member function.<linebreak/>
 If the given function pointer is not a member-function, this will always return false.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function pointer   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="451" column="29" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reflection_8h_1a5858366e3d237211965cf351e7c4c43e" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>auto</type>
            <declname>Func</declname>
            <defname>Func</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">EXTRAIT_CONSTEXINI</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>EXTRAIT_CONSTEXINI bool extrait::isRvalueQualified_v</definition>
        <argsstring></argsstring>
        <name>isRvalueQualified_v</name>
        <qualifiedname>extrait::isRvalueQualified_v</qualifiedname>
        <initializer>= <ref refid="structextrait_1_1is_rvalue_qualified" kindref="compound">isRvalueQualified</ref>&lt;<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Func</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets whether a given function pointer is a rvalue-qualified member function.<linebreak/>
 If the given function pointer is not a member-function, this will always return false.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function pointer   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="464" column="29" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reflection_8h_1adb30037c71a59f819b9df3bf2eb883dd" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>auto</type>
            <declname>Func</declname>
            <defname>Func</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">EXTRAIT_CONSTEXINI</ref> std::size_t</type>
        <definition>EXTRAIT_CONSTEXINI std::size_t extrait::parameterCount_v</definition>
        <argsstring></argsstring>
        <name>parameterCount_v</name>
        <qualifiedname>extrait::parameterCount_v</qualifiedname>
        <initializer>= <ref refid="structextrait_1_1parameter_count" kindref="compound">parameterCount</ref>&lt;<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Func</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the number of parameters of a function pointer. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function pointer   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="475" column="36" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__list_8h_1a8972fb9c0ed6b56a014ecd4cb6cdbf64" prot="public" static="no" constexpr="yes" mutable="no">
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">int</ref></type>
        <definition>constexpr int extrait::endOfParameterList</definition>
        <argsstring></argsstring>
        <name>endOfParameterList</name>
        <qualifiedname>extrait::endOfParameterList</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
<para>A constant initialised to -1, that should indicate the end of a class template parameter-list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="63" column="26" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__list_8h_1ac190fedef7ce5781b9ac13d0474a0613" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>constexpr bool extrait::instantiatesClassTemplate_v</definition>
        <argsstring></argsstring>
        <name>instantiatesClassTemplate_v</name>
        <qualifiedname>extrait::instantiatesClassTemplate_v</qualifiedname>
        <initializer>= <ref refid="structextrait_1_1instantiates_class_template" kindref="compound">instantiatesClassTemplate</ref>&lt;<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>&gt;::value</initializer>
        <briefdescription>
<para>Value helper for <ref refid="structextrait_1_1instantiates_class_template" kindref="compound">extrait::instantiatesClassTemplate</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="92" column="27" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__list_8h_1a63ebc0e3fa91df33cf3ec430d10f10e9" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>constexpr bool extrait::instantiatesSameClassTemplate_v</definition>
        <argsstring></argsstring>
        <name>instantiatesSameClassTemplate_v</name>
        <qualifiedname>extrait::instantiatesSameClassTemplate_v</qualifiedname>
        <initializer>= <ref refid="structextrait_1_1instantiates_same_class_template" kindref="compound">instantiatesSameClassTemplate</ref>&lt;<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">U</ref>&gt;::value</initializer>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1instantiates_same_class_template" kindref="compound">extrait::instantiatesSameClassTemplate</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="123" column="27" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__list_8h_1aceeed850cba035a4707066de57cc4566" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Key</type>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>constexpr bool extrait::contains_v</definition>
        <argsstring></argsstring>
        <name>contains_v</name>
        <qualifiedname>extrait::contains_v</qualifiedname>
        <initializer>= <ref refid="structextrait_1_1contains" kindref="compound">contains</ref>&lt;<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Key</ref>&gt;::value</initializer>
        <briefdescription>
<para>Value helper for <ref refid="structextrait_1_1contains" kindref="compound">extrait::contains</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="155" column="27" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__list_8h_1a3db1db7035fbbceef5bd807efe072b89" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>constexpr bool extrait::isEmpty_v</definition>
        <argsstring></argsstring>
        <name>isEmpty_v</name>
        <qualifiedname>extrait::isEmpty_v</qualifiedname>
        <initializer>= <ref refid="structextrait_1_1is_empty" kindref="compound">isEmpty</ref>&lt;<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>&gt;::value</initializer>
        <briefdescription>
<para>Value helper for <ref refid="structextrait_1_1is_empty" kindref="compound">extrait::isEmpty</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="191" column="27" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__list_8h_1a380594f10bc75e37ccfafb535bc1a36e" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>constexpr bool extrait::isEmptyInstantiated_v</definition>
        <argsstring></argsstring>
        <name>isEmptyInstantiated_v</name>
        <qualifiedname>extrait::isEmptyInstantiated_v</qualifiedname>
        <initializer>= <ref refid="structextrait_1_1is_empty_instantiated" kindref="compound">isEmptyInstantiated</ref>&lt;<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>&gt;::value</initializer>
        <briefdescription>
<para>Value helper for <ref refid="structextrait_1_1is_empty_instantiated" kindref="compound">extrait::isEmptyInstantiated</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="226" column="27" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__list_8h_1a80c607235d245007d89cc8e12fc4738b" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>constexpr bool extrait::sameTemplateArguments_v</definition>
        <argsstring></argsstring>
        <name>sameTemplateArguments_v</name>
        <qualifiedname>extrait::sameTemplateArguments_v</qualifiedname>
        <initializer>= <ref refid="structextrait_1_1same_template_arguments" kindref="compound">sameTemplateArguments</ref>&lt;<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">U</ref>&gt;::value</initializer>
        <briefdescription>
<para>Value helper for <ref refid="structextrait_1_1same_template_arguments" kindref="compound">extrait::sameTemplateArguments</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="259" column="27" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__list_8h_1a90de1de7361373d79084b2af6f6b7d2b" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>StartTypes</declname>
            <defname>StartTypes</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>constexpr bool extrait::startsWith_v</definition>
        <argsstring></argsstring>
        <name>startsWith_v</name>
        <qualifiedname>extrait::startsWith_v</qualifiedname>
        <initializer>= <ref refid="structextrait_1_1starts_with" kindref="compound">startsWith</ref>&lt;<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, StartTypes...&gt;::value</initializer>
        <briefdescription>
<para>Value helper for <ref refid="structextrait_1_1starts_with" kindref="compound">extrait::startsWith</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="292" column="27" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__list_8h_1a2ddb8e22c00386658296451d7d832de3" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>EndTypes</declname>
            <defname>EndTypes</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>constexpr bool extrait::endsWith_v</definition>
        <argsstring></argsstring>
        <name>endsWith_v</name>
        <qualifiedname>extrait::endsWith_v</qualifiedname>
        <initializer>= <ref refid="structextrait_1_1ends_with" kindref="compound">endsWith</ref>&lt;<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, EndTypes...&gt;::value</initializer>
        <briefdescription>
<para>Value helper for <ref refid="structextrait_1_1ends_with" kindref="compound">extrait::endsWith</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="326" column="27" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__list_8h_1a510dc13f1253a41e21cc4748bf0e75a7" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>template&lt; class &gt; class</type>
            <declname>Predicate</declname>
            <defname>Predicate</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> std::size_t</type>
        <definition>constexpr std::size_t extrait::match_v</definition>
        <argsstring></argsstring>
        <name>match_v</name>
        <qualifiedname>extrait::match_v</qualifiedname>
        <initializer>= <ref refid="structextrait_1_1match" kindref="compound">match</ref>&lt;<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Predicate</ref>&gt;::value</initializer>
        <briefdescription>
<para>Value helper for <ref refid="structextrait_1_1match" kindref="compound">extrait::match</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="366" column="34" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__list_8h_1a145f6b0fcd13aabe3b5426dcf36d29a0" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>template&lt; class &gt; class</type>
            <declname>Predicate</declname>
            <defname>Predicate</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> std::size_t</type>
        <definition>constexpr std::size_t extrait::mismatch_v</definition>
        <argsstring></argsstring>
        <name>mismatch_v</name>
        <qualifiedname>extrait::mismatch_v</qualifiedname>
        <initializer>= <ref refid="structextrait_1_1mismatch" kindref="compound">mismatch</ref>&lt;<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Predicate</ref>&gt;::value</initializer>
        <briefdescription>
<para>Value helper for <ref refid="structextrait_1_1mismatch" kindref="compound">extrait::mismatch</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="406" column="34" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__list_8h_1abd775ea48cc4540f1b8206d6a7edcec4" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>template&lt; class &gt; class</type>
            <declname>Predicate</declname>
            <defname>Predicate</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>constexpr bool extrait::matchAny_v</definition>
        <argsstring></argsstring>
        <name>matchAny_v</name>
        <qualifiedname>extrait::matchAny_v</qualifiedname>
        <initializer>= <ref refid="structextrait_1_1match_any" kindref="compound">matchAny</ref>&lt;<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Predicate</ref>&gt;::value</initializer>
        <briefdescription>
<para>Value helper for <ref refid="structextrait_1_1match_any" kindref="compound">extrait::matchAny</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="447" column="27" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__list_8h_1ab9a1dd1ed5ac39c7ca6d30c08c36efaa" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>template&lt; class &gt; class</type>
            <declname>Predicate</declname>
            <defname>Predicate</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>constexpr bool extrait::matchAll_v</definition>
        <argsstring></argsstring>
        <name>matchAll_v</name>
        <qualifiedname>extrait::matchAll_v</qualifiedname>
        <initializer>= <ref refid="structextrait_1_1match_all" kindref="compound">matchAll</ref>&lt;<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Predicate</ref>&gt;::value</initializer>
        <briefdescription>
<para>Value helper for <ref refid="structextrait_1_1match_all" kindref="compound">extrait::matchAll</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="488" column="27" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="488" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__list_8h_1ad2c6ebf0ef742fe6f7116ae5ede117c5" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>template&lt; class &gt; class</type>
            <declname>Predicate</declname>
            <defname>Predicate</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>constexpr bool extrait::matchNone_v</definition>
        <argsstring></argsstring>
        <name>matchNone_v</name>
        <qualifiedname>extrait::matchNone_v</qualifiedname>
        <initializer>= <ref refid="structextrait_1_1match_none" kindref="compound">matchNone</ref>&lt;<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Predicate</ref>&gt;::value</initializer>
        <briefdescription>
<para>Value helper for <ref refid="structextrait_1_1match_none" kindref="compound">extrait::matchNone</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="529" column="27" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="529" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__list_8h_1ad73ae54a2c94ea8166ffb9292891dace" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Key</type>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a6ba49602a991431d5274a29e1a5e5b61" kindref="member">index_t</ref></type>
        <definition>constexpr index_t extrait::indexOf_v</definition>
        <argsstring></argsstring>
        <name>indexOf_v</name>
        <qualifiedname>extrait::indexOf_v</qualifiedname>
        <initializer>= <ref refid="structextrait_1_1index_of" kindref="compound">indexOf</ref>&lt;<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Key</ref>&gt;::value</initializer>
        <briefdescription>
<para>Value helper for <ref refid="structextrait_1_1index_of" kindref="compound">extrait::indexOf</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="563" column="30" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="563" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__list_8h_1a01c9b0118c600947c8e01ac55abbab60" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Key</type>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a6ba49602a991431d5274a29e1a5e5b61" kindref="member">index_t</ref></type>
        <definition>constexpr index_t extrait::lastIndexOf_v</definition>
        <argsstring></argsstring>
        <name>lastIndexOf_v</name>
        <qualifiedname>extrait::lastIndexOf_v</qualifiedname>
        <initializer>= <ref refid="structextrait_1_1last_index_of" kindref="compound">lastIndexOf</ref>&lt;<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Key</ref>&gt;::value</initializer>
        <briefdescription>
<para>Value helper for <ref refid="structextrait_1_1last_index_of" kindref="compound">extrait::lastIndexOf</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="598" column="30" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="598" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__list_8h_1aeceb00ee7290175462d337fbbf2e5acf" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">int</ref></type>
        <definition>constexpr int extrait::length_v</definition>
        <argsstring></argsstring>
        <name>length_v</name>
        <qualifiedname>extrait::length_v</qualifiedname>
        <initializer>= <ref refid="structextrait_1_1length" kindref="compound">length</ref>&lt;<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>&gt;::value</initializer>
        <briefdescription>
<para>Value helper for <ref refid="structextrait_1_1length" kindref="compound">extrait::length</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="629" column="26" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="629" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="common_8h_1a09e504879569026454b0aa254c56be04" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string extrait::getActualTypeName</definition>
        <argsstring>() noexcept</argsstring>
        <name>getActualTypeName</name>
        <qualifiedname>extrait::getActualTypeName</qualifiedname>
        <briefdescription>
<para>Retrieves the runtime type name of a type. </para>
        </briefdescription>
        <detaileddescription>
<para>Tries to retrieve the runtime type name for template parameter T.<linebreak/>
 On GCC and Clang, this will also demangle the symbol.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to get the runtime type name of (if function parameter object is given, this will be automatically deduced)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>(If given) Any instantiated object or object pointer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A std::string containing the runtime type name of type T </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" line="241" column="24" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" bodystart="241" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="common_8h_1a3cf0270de7450d57e77b79b3326b2a46" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string extrait::getActualTypeName</definition>
        <argsstring>(const T *const object) noexcept(noexcept(getActualTypeName&lt; T &gt;()))</argsstring>
        <name>getActualTypeName</name>
        <qualifiedname>extrait::getActualTypeName</qualifiedname>
        <param>
          <type>const T *const</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Retrieves the runtime type name of a type.   </para>
        </briefdescription>
        <detaileddescription>
<para>Tries to retrieve the runtime type name for template parameter T.<linebreak/>
 On GCC and Clang, this will also demangle the symbol.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to get the runtime type name of (if function parameter object is given, this will be automatically deduced)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>(If given) Any instantiated object or object pointer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A std::string containing the runtime type name of type T   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" line="252" column="24" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" bodystart="252" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="common_8h_1ab5dfcbfe5c68c139ed6984b120c023f4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string extrait::getActualTypeName</definition>
        <argsstring>(const T &amp;object) noexcept(noexcept(getActualTypeName&lt; T &gt;()))</argsstring>
        <name>getActualTypeName</name>
        <qualifiedname>extrait::getActualTypeName</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Retrieves the runtime type name of a type.   </para>
        </briefdescription>
        <detaileddescription>
<para>Tries to retrieve the runtime type name for template parameter T.<linebreak/>
 On GCC and Clang, this will also demangle the symbol.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to get the runtime type name of (if function parameter object is given, this will be automatically deduced)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>(If given) Any instantiated object or object pointer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A std::string containing the runtime type name of type T   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" line="263" column="24" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" bodystart="263" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="common_8h_1aa69262f5af68e50b298cdd1e57d29c01" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Derived</type>
          </param>
          <param>
            <type>class Base</type>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">auto</ref></type>
        <definition>constexpr auto extrait::stynamic_cast</definition>
        <argsstring>(Base *const base) noexcept -&gt; std::remove_pointer_t&lt; Derived &gt; *</argsstring>
        <name>stynamic_cast</name>
        <qualifiedname>extrait::stynamic_cast</qualifiedname>
        <param>
          <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Base</ref> *<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">const</ref></type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Downcasts an object without the overhead of dynamic_cast with a debug runtime type safe-guard. </para>
        </briefdescription>
        <detaileddescription>
<para>Downcasts class object base of type Base to class Derived with static_cast and asserts in debug builds if Base is not an instance of Derived.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer or reference to a type that is a subclass of Base (taking cv-qualification into account) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Base</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the base class to cast to Derived, this is usually automatically deduced</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer or reference to an instance of a virtual base class</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The converted type that would result from casting the Base objet to Derived </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" line="287" column="27" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" bodystart="287" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="common_8h_1aed75f8e48f12c2782eabbe279a99740b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Derived</type>
          </param>
          <param>
            <type>class Base</type>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">auto</ref></type>
        <definition>constexpr auto extrait::stynamic_cast</definition>
        <argsstring>(Base &amp;base) noexcept -&gt; std::remove_reference_t&lt; Derived &gt; &amp;</argsstring>
        <name>stynamic_cast</name>
        <qualifiedname>extrait::stynamic_cast</qualifiedname>
        <param>
          <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Base</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Downcasts an object without the overhead of dynamic_cast with a debug runtime type safe-guard.   </para>
        </briefdescription>
        <detaileddescription>
<para>Downcasts class object base of type Base to class Derived with static_cast and asserts in debug builds if Base is not an instance of Derived.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer or reference to a type that is a subclass of Base (taking cv-qualification into account) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Base</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the base class to cast to Derived, this is usually automatically deduced</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer or reference to an instance of a virtual base class</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The converted type that would result from casting the Base objet to Derived   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" line="303" column="27" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" bodystart="303" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="type__container_8h_1a7c0800e9f11561b2d418953ac34d5414" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>index_t</type>
            <declname>Index</declname>
            <defname>Index</defname>
          </param>
          <param>
            <type>class ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">auto</ref></type>
        <definition>static constexpr auto extrait::makeVariant</definition>
        <argsstring>(Args &amp;&amp;...args) EXTRAIT_NOEXDED((detail</argsstring>
        <name>makeVariant</name>
        <qualifiedname>extrait::makeVariant</qualifiedname>
        <param>
          <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Args</ref> &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a std::variant with an variant type and fills them in order the types appear. This only works if all types have at least one constructor that complies with the other types.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the type to construct</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The constructor arguments of the type the variant should be constructed with </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The constructed std::variant Creates an std::array with an variant type and fills them in order the types appear. This only works if all types have at least one constructor that complies with the other types.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structextrait_1_1_type_array" kindref="compound">extrait::T</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The constructor arguments each type should be constructed with </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The constructed std::array </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_container.h" line="772" column="34" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_container.h" bodystart="772" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="type__container_8h_1a2e5a704978077a9e1923fbff26443374" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>index_t</type>
            <declname>Index</declname>
            <defname>Index</defname>
          </param>
          <param>
            <type>class ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">auto</ref></type>
        <definition>static constexpr auto extrait::construct</definition>
        <argsstring>(Args &amp;&amp;...args) EXTRAIT_NOEXDED((detail</argsstring>
        <name>construct</name>
        <qualifiedname>extrait::construct</qualifiedname>
        <param>
          <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Args</ref> &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a new object from the type at the specified index.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structextrait_1_1_type_array" kindref="compound">extrait::T</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the type to construct</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to parse to the constructor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly constructed object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_container.h" line="808" column="34" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_container.h" bodystart="808" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="type__container_8h_1a2647f8e719023e6cd597ef2435826486" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>index_t</type>
            <declname>Index</declname>
            <defname>Index</defname>
          </param>
          <param>
            <type>class Allocator</type>
            <defval>std::allocator&lt;std::decay_t&lt;typename T::template at&lt;Index&gt;&gt;&gt;</defval>
          </param>
          <param>
            <type>class ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">auto</ref></type>
        <definition>static auto extrait::allocate</definition>
        <argsstring>(Args &amp;&amp;...args) -&gt; decltype(detail::allocate&lt; T, Index, Allocator &gt;(T{}, std::forward&lt; Args &gt;(args)...))</argsstring>
        <name>allocate</name>
        <qualifiedname>extrait::allocate</qualifiedname>
        <param>
          <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Args</ref> &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocates a new object from the type at the specified index.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structextrait_1_1_type_array" kindref="compound">extrait::T</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the type to construct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>The allocator to allocate the object with</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to parse to the constructor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly allocated object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_container.h" line="827" column="24" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_container.h" bodystart="827" bodyend="831"/>
      </memberdef>
      <memberdef kind="function" id="type__container_8h_1a9222700a161c0da3dbdeb37acdbb0cfb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>Index</declname>
            <defname>Index</defname>
          </param>
          <param>
            <type>class ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">auto</ref></type>
        <definition>static auto extrait::makeUnique</definition>
        <argsstring>(Args &amp;&amp;...args) -&gt; decltype(detail::makeUnique&lt; T, Index &gt;(T{}, std::forward&lt; Args &gt;(args)...))</argsstring>
        <name>makeUnique</name>
        <qualifiedname>extrait::makeUnique</qualifiedname>
        <param>
          <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Args</ref> &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new std::unique_ptr from the type at the specified index.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structextrait_1_1_type_array" kindref="compound">extrait::T</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the type to construct</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to parse to the constructor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The std::unique_ptr object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_container.h" line="844" column="24" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_container.h" bodystart="844" bodyend="848"/>
      </memberdef>
      <memberdef kind="function" id="type__container_8h_1a7a4f88619605e7e886c7dcb0040ff893" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>Index</declname>
            <defname>Index</defname>
          </param>
          <param>
            <type>class ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">auto</ref></type>
        <definition>static auto extrait::makeShared</definition>
        <argsstring>(Args &amp;&amp;...args) -&gt; decltype(detail::makeShared&lt; T, Index &gt;(T{}, std::forward&lt; Args &gt;(args)...))</argsstring>
        <name>makeShared</name>
        <qualifiedname>extrait::makeShared</qualifiedname>
        <param>
          <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Args</ref> &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new std::shared_ptr from the type at the specified index.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structextrait_1_1_type_array" kindref="compound">extrait::T</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the type to construct</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to parse to the constructor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The std::shared_ptr object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_container.h" line="861" column="24" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_container.h" bodystart="861" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="type__container_8h_1a0ae3cc41d2b52221e6aeefe6dadff504" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, index_t &gt; class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>class Fn</type>
          </param>
          <param>
            <type>class Array</type>
          </param>
          <param>
            <type>index_t</type>
            <declname>Start</declname>
            <defname>Start</defname>
          </param>
          <param>
            <type>index_t</type>
            <declname>End</declname>
            <defname>End</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">auto</ref></type>
        <definition>static constexpr auto extrait::forEach</definition>
        <argsstring>(T&lt; Array, Start &gt; start, T&lt; Array, End &gt; end, Fn &amp;&amp;fn) EXTRAIT_NOEXDED((detail</argsstring>
        <name>forEach</name>
        <qualifiedname>extrait::forEach</qualifiedname>
        <param>
          <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Array</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Start</ref> &gt;</type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Array</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">End</ref> &gt;</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Fn</ref> &amp;&amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>&quot;Iterates&quot; over the types inside a <ref refid="structextrait_1_1_type_array" kindref="compound">extrait::T</ref> by expanding an invocable for each type in the type-list.<linebreak/>
 If the invocable returns something, this will return a std::array with each returned value at the index of the type, otherwise this returns void.<linebreak/>
 <linebreak/>
 Let&apos;s have an example: We want to sum the max values of all types in the type-list. <programlisting><codeline><highlight class="comment">//<sp/>Here<sp/>we<sp/>have<sp/>our<sp/>type<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Types<sp/>=<sp/><ref refid="structextrait_1_1_type_array" kindref="compound">extrait::T</ref>&amp;lt;char,<sp/>bool,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">&amp;gt;;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lambda<sp/>=<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it)<sp/>-&amp;gt;<sp/>std::size_t</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>type<sp/>from<sp/>the<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(it)::type;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::numeric_limits&amp;lt;type&amp;gt;::max();</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::size_t<sp/>num<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>array<sp/>=<sp/>extrait::forEach(Types::begin_v,<sp/>Types::end_v,<sp/>lambda);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>loop<sp/>over<sp/>the<sp/>resultant<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>val<sp/>:<sp/>array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>val;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Now<sp/>let&apos;s<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&amp;lt;&amp;lt;<sp/>sum<sp/>&amp;lt;&amp;lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="structextrait_1_1_type_array" kindref="compound">T</ref> iterator signifying the begin of a range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="structextrait_1_1_type_array" kindref="compound">T</ref> iterator signifying the end of a range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The invocable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the invocable returns non-void, then std::array&lt;decltype(Fn()), sizeof...(Types)&amp;gt, otherwise void </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_container.h" line="905" column="34" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_container.h" bodystart="905" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="type__container_8h_1a13742e86b5e7f4f22596d396a3c46631" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, index_t &gt; class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>class Fn</type>
          </param>
          <param>
            <type>class Array</type>
          </param>
          <param>
            <type>index_t</type>
            <declname>Start</declname>
            <defname>Start</defname>
          </param>
          <param>
            <type>index_t</type>
            <declname>End</declname>
            <defname>End</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">auto</ref></type>
        <definition>static constexpr auto extrait::forAll</definition>
        <argsstring>(T&lt; Array, Start &gt; start, T&lt; Array, End &gt; end, Fn &amp;&amp;fn) EXTRAIT_NOEXDED((detail</argsstring>
        <name>forAll</name>
        <qualifiedname>extrait::forAll</qualifiedname>
        <param>
          <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Array</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Start</ref> &gt;</type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Array</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">End</ref> &gt;</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Fn</ref> &amp;&amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Executes an invocable with all the types inside a <ref refid="structextrait_1_1_type_array" kindref="compound">extrait::T</ref> ranging from [start, end].<linebreak/>
 If the invocable returns something, this will return the return type of the invocable, otherwise void. <linebreak/>
 Let&apos;s have an example: We want to sum the max values of all types in the type-list. <programlisting><codeline><highlight class="keyword">using<sp/></highlight><highlight class="normal">Types<sp/>=<sp/><ref refid="structextrait_1_1_type_array" kindref="compound">extrait::T</ref>&amp;lt;char,<sp/>bool,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">&amp;gt;;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lambda<sp/>=<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>...it)<sp/>-&amp;gt;<sp/>std::size_t</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pack<sp/>expand<sp/>for<sp/>every<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(static_cast&amp;lt;std::size_t&amp;gt;(std::numeric_limits&amp;lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(it)::type&amp;gt;::max())<sp/>+<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Expand<sp/>the<sp/>types<sp/>from<sp/>our<sp/>type<sp/>array<sp/>and<sp/>add<sp/>them<sp/>to<sp/>each<sp/>other<sp/>through<sp/>pack<sp/>expansion</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::size_t<sp/>num<sp/>=<sp/>extrait::forAll(Types::begin_v,<sp/>Types::end_v,<sp/>lambda);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Now<sp/>let&apos;s<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&amp;lt;&amp;lt;<sp/>sum<sp/>&amp;lt;&amp;lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="structextrait_1_1_type_array" kindref="compound">T</ref> iterator signifying the begin of a range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="structextrait_1_1_type_array" kindref="compound">T</ref> iterator signifying the end of a range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The invocable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the invocable returns non-void, then decltype(Fn()), otherwise void </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_container.h" line="941" column="34" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_container.h" bodystart="941" bodyend="948"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" line="67" column="1"/>
  </compounddef>
</doxygen>
