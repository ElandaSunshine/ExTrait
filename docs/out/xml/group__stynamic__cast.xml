<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="group__stynamic__cast" kind="group">
    <compoundname>stynamic_cast</compoundname>
    <title>extrait::stynamic_cast</title>
    <sectiondef kind="func">
      <memberdef kind="function" id="group__stynamic__cast_1gaa69262f5af68e50b298cdd1e57d29c01" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Derived</type>
          </param>
          <param>
            <type>class Base</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto extrait::stynamic_cast</definition>
        <argsstring>(Base *const base) noexcept -&gt; std::remove_pointer_t&lt; Derived &gt; *</argsstring>
        <name>stynamic_cast</name>
        <qualifiedname>extrait::stynamic_cast</qualifiedname>
        <param>
          <type>Base *const</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Converts a base pointer of type Base to a pointer of Derived. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" line="323" column="27" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" bodystart="323" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="group__stynamic__cast_1gaed75f8e48f12c2782eabbe279a99740b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Derived</type>
          </param>
          <param>
            <type>class Base</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto extrait::stynamic_cast</definition>
        <argsstring>(Base &amp;base) noexcept -&gt; std::remove_reference_t&lt; Derived &gt; &amp;</argsstring>
        <name>stynamic_cast</name>
        <qualifiedname>extrait::stynamic_cast</qualifiedname>
        <param>
          <type>Base &amp;</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Converts a base reference of type Base to a reference of Derived. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" line="340" column="27" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" bodystart="340" bodyend="346"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Downcasts an object without the overhead of dynamic_cast with a debug runtime type safe-guard. </para>
    </briefdescription>
    <detaileddescription>
<para>Downcasts class object base of type Base to class Derived with static_cast and asserts in debug builds if Base is not an instance of Derived.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer or reference to a type that is a subclass of Base (taking cv-qualification into account) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Base</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the base class to cast to Derived, this is usually automatically deduced</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer or reference to an instance of a virtual base class</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The converted type that would result from casting the Base objet to Derived </para>
</simplesect>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
