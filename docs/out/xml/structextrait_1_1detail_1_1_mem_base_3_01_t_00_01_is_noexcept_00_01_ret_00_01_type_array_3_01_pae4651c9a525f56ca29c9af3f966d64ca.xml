<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca" kind="struct" language="C++" prot="public">
    <compoundname>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;</compoundname>
    <templateparamlist>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref></type>
      </param>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <declname>IsNoexcept</declname>
        <defname>IsNoexcept</defname>
      </param>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Ret</ref></type>
      </param>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">auto</ref></type>
        <declname>Func</declname>
        <defname>Func</defname>
      </param>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <declname>LV</declname>
        <defname>LV</defname>
      </param>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <declname>RV</declname>
        <defname>RV</defname>
      </param>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <declname>CN</declname>
        <defname>CN</defname>
      </param>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <declname>VOL</declname>
        <defname>VOL</defname>
      </param>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> ...</type>
        <declname>ParamTypes</declname>
        <defname>ParamTypes</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a4a6f071170f5811756488e72cbdab611" prot="public" static="no">
        <type><ref refid="structextrait_1_1_type_array" kindref="compound">T</ref>&lt; ParamTypes... &gt;</type>
        <definition>using extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::parameters_t =  T&lt;ParamTypes...&gt;</definition>
        <argsstring></argsstring>
        <name>parameters_t</name>
        <qualifiedname>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::parameters_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A type array of the function&apos;s parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="77" column="13" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a79b15b61ce1ee04bb4b57e555efd9d12" prot="public" static="no">
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Ret</ref></type>
        <definition>using extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::return_t =  Ret</definition>
        <argsstring></argsstring>
        <name>return_t</name>
        <qualifiedname>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::return_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The return type of the function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="80" column="13" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a38c6331f3feec245a1a2cd925d64b713" prot="public" static="no">
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref></type>
        <definition>using extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::owner_t =  T</definition>
        <argsstring></argsstring>
        <name>owner_t</name>
        <qualifiedname>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::owner_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The class this is a member function of, or std::nullptr_t if it is not a member function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="83" column="13" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a0ee95cfe3f198bd71f1859fd74aede58" prot="public" static="no">
        <type>std::remove_reference_t&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">decltype</ref>(<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Func</ref>)&gt;</type>
        <definition>using extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::pointer_t =  std::remove_reference_t&lt;decltype(Func)&gt;</definition>
        <argsstring></argsstring>
        <name>pointer_t</name>
        <qualifiedname>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::pointer_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The function pointer type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="86" column="13" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="86" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a0cb0f201d72f3b5ced874b7d0b9d8202" prot="public" static="yes" mutable="no">
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">EXTRAIT_CONSTEXINI</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">int</ref></type>
        <definition>EXTRAIT_CONSTEXINI int extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::parameterCount</definition>
        <argsstring></argsstring>
        <name>parameterCount</name>
        <qualifiedname>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::parameterCount</qualifiedname>
        <initializer>= sizeof...(<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">ParamTypes</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The number of parameters the function has. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="90" column="43" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a2b91f3bd29d49d483b78266387711ffd" prot="public" static="yes" mutable="no">
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">EXTRAIT_CONSTEXINI</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>EXTRAIT_CONSTEXINI bool extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::isMemberFunction</definition>
        <argsstring></argsstring>
        <name>isMemberFunction</name>
        <qualifiedname>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::isMemberFunction</qualifiedname>
        <initializer>= <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">true</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets whether this function pointer is a member function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="93" column="44" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1abc150acb1ed374beea4da542f1ec0f26" prot="public" static="yes" mutable="no">
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">EXTRAIT_CONSTEXINI</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>EXTRAIT_CONSTEXINI bool extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::isNoexcept</definition>
        <argsstring></argsstring>
        <name>isNoexcept</name>
        <qualifiedname>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::isNoexcept</qualifiedname>
        <initializer>= <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">IsNoexcept</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets whether this function is marked non-throwing.<linebreak/>
 Sadly, as it stands currently, this will always return false as there is no reliable way to check for this yet. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="101" column="44" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a04e1520deebfaffbed96d27caae107df" prot="public" static="yes" mutable="no">
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">EXTRAIT_CONSTEXINI</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>EXTRAIT_CONSTEXINI bool extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::isConstQualified</definition>
        <argsstring></argsstring>
        <name>isConstQualified</name>
        <qualifiedname>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::isConstQualified</qualifiedname>
        <initializer>= <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">CN</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets whether this function is const-qualified, for non-member functions this will always return false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="106" column="44" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1ad5392d84c1c1ea84309f9a58424cbfdb" prot="public" static="yes" mutable="no">
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">EXTRAIT_CONSTEXINI</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>EXTRAIT_CONSTEXINI bool extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::isVolatileQualified</definition>
        <argsstring></argsstring>
        <name>isVolatileQualified</name>
        <qualifiedname>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::isVolatileQualified</qualifiedname>
        <initializer>= <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">VOL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets whether this function is volatile-qualified, for non-member functions this will always return false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="112" column="44" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a1444ebc5d03d1e9dfccadd89b8da462c" prot="public" static="yes" mutable="no">
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">EXTRAIT_CONSTEXINI</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>EXTRAIT_CONSTEXINI bool extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::isLvalueQualified</definition>
        <argsstring></argsstring>
        <name>isLvalueQualified</name>
        <qualifiedname>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::isLvalueQualified</qualifiedname>
        <initializer>= <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">LV</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets whether this function is LValue-qualified, for non-member functions this will always return false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="117" column="44" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1ac47ee329e0ae35a107092c83dfb34145" prot="public" static="yes" mutable="no">
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">EXTRAIT_CONSTEXINI</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>EXTRAIT_CONSTEXINI bool extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::isRvalueQualified</definition>
        <argsstring></argsstring>
        <name>isRvalueQualified</name>
        <qualifiedname>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::isRvalueQualified</qualifiedname>
        <initializer>= <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">RV</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets whether this function is RValue-qualified, for non-member functions this will always return false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="122" column="44" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="122" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1ae476cc13269dc351c525a585baf95e30" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">U</ref></type>
          </param>
          <param>
            <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">auto</ref></type>
        <definition>static constexpr auto extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::invoke</definition>
        <argsstring>(U *object, Args &amp;&amp;...args) EXTRAIT_NOEXDED((std</argsstring>
        <name>invoke</name>
        <qualifiedname>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;::invoke</qualifiedname>
        <param>
          <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">U</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Args</ref> &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invokes the function pointer with the given arguments, if possible.<linebreak/>
 If this is a free function pointer, the first argument will be ignored and can be a nullptr.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the object this function pointer is a member off </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to pass to the function pointer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the function call </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="134" column="35" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="134" bodyend="140"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="73" column="9" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="74" bodyend="141"/>
    <listofallmembers>
      <member refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1ae476cc13269dc351c525a585baf95e30" prot="public" virt="non-virtual"><scope>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;</scope><name>invoke</name></member>
      <member refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a04e1520deebfaffbed96d27caae107df" prot="public" virt="non-virtual"><scope>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;</scope><name>isConstQualified</name></member>
      <member refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a1444ebc5d03d1e9dfccadd89b8da462c" prot="public" virt="non-virtual"><scope>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;</scope><name>isLvalueQualified</name></member>
      <member refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a2b91f3bd29d49d483b78266387711ffd" prot="public" virt="non-virtual"><scope>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;</scope><name>isMemberFunction</name></member>
      <member refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1abc150acb1ed374beea4da542f1ec0f26" prot="public" virt="non-virtual"><scope>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;</scope><name>isNoexcept</name></member>
      <member refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1ac47ee329e0ae35a107092c83dfb34145" prot="public" virt="non-virtual"><scope>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;</scope><name>isRvalueQualified</name></member>
      <member refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1ad5392d84c1c1ea84309f9a58424cbfdb" prot="public" virt="non-virtual"><scope>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;</scope><name>isVolatileQualified</name></member>
      <member refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a38c6331f3feec245a1a2cd925d64b713" prot="public" virt="non-virtual"><scope>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;</scope><name>owner_t</name></member>
      <member refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a0cb0f201d72f3b5ced874b7d0b9d8202" prot="public" virt="non-virtual"><scope>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;</scope><name>parameterCount</name></member>
      <member refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a4a6f071170f5811756488e72cbdab611" prot="public" virt="non-virtual"><scope>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;</scope><name>parameters_t</name></member>
      <member refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a0ee95cfe3f198bd71f1859fd74aede58" prot="public" virt="non-virtual"><scope>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;</scope><name>pointer_t</name></member>
      <member refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a79b15b61ce1ee04bb4b57e555efd9d12" prot="public" virt="non-virtual"><scope>extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;</scope><name>return_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
