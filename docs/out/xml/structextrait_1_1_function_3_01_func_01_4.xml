<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="structextrait_1_1_function_3_01_func_01_4" kind="struct" language="C++" prot="public">
    <compoundname>extrait::Function&lt; Func &gt;</compoundname>
    <basecompoundref refid="structextrait_1_1detail_1_1_mem_base" prot="public" virt="non-virtual">extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, false, false, false &gt;</basecompoundref>
    <basecompoundref refid="structextrait_1_1detail_1_1_mem_base" prot="public" virt="non-virtual">extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, false, true, false &gt;</basecompoundref>
    <basecompoundref refid="structextrait_1_1detail_1_1_mem_base" prot="public" virt="non-virtual">extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, false, false, true &gt;</basecompoundref>
    <basecompoundref refid="structextrait_1_1detail_1_1_mem_base" prot="public" virt="non-virtual">extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, false, true, true &gt;</basecompoundref>
    <basecompoundref refid="structextrait_1_1detail_1_1_mem_base" prot="public" virt="non-virtual">extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, true, false, false, false &gt;</basecompoundref>
    <basecompoundref refid="structextrait_1_1detail_1_1_mem_base" prot="public" virt="non-virtual">extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, true, false, true, false &gt;</basecompoundref>
    <basecompoundref refid="structextrait_1_1detail_1_1_mem_base" prot="public" virt="non-virtual">extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, true, false, false, true &gt;</basecompoundref>
    <basecompoundref refid="structextrait_1_1detail_1_1_mem_base" prot="public" virt="non-virtual">extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, true, false, true, true &gt;</basecompoundref>
    <basecompoundref refid="structextrait_1_1detail_1_1_mem_base" prot="public" virt="non-virtual">extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, true, false, false &gt;</basecompoundref>
    <basecompoundref refid="structextrait_1_1detail_1_1_mem_base" prot="public" virt="non-virtual">extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, true, true, false &gt;</basecompoundref>
    <basecompoundref refid="structextrait_1_1detail_1_1_mem_base" prot="public" virt="non-virtual">extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, true, false, true &gt;</basecompoundref>
    <basecompoundref refid="structextrait_1_1detail_1_1_mem_base" prot="public" virt="non-virtual">extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, true, true, true &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref></type>
      </param>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Ret</ref></type>
      </param>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> ...</type>
        <declname>Params</declname>
        <defname>Params</defname>
      </param>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Ret</ref>(T::*)(Params...)</type>
        <declname>Func</declname>
        <defname>Func</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structextrait_1_1_function_3_01_func_01_4_1a1eac06008af38582ad216ef1c62372f4" prot="public" static="no">
        <type><ref refid="structextrait_1_1_type_array" kindref="compound">T</ref>&lt; Params... &gt;</type>
        <definition>using extrait::Function&lt; Func &gt;::parameters_t =  T&lt;Params...&gt;</definition>
        <argsstring></argsstring>
        <name>parameters_t</name>
        <qualifiedname>extrait::Function&lt; Func &gt;::parameters_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A type list of the function&apos;s parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="234" column="9" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structextrait_1_1_function_3_01_func_01_4_1a1cbde1106fa379e72eff8e4bc950f574" prot="public" static="no">
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Ret</ref></type>
        <definition>using extrait::Function&lt; Func &gt;::return_t =  Ret</definition>
        <argsstring></argsstring>
        <name>return_t</name>
        <qualifiedname>extrait::Function&lt; Func &gt;::return_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The return type of the function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="237" column="9" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structextrait_1_1_function_3_01_func_01_4_1a221a3aa9d0105ba2810571ad718f1af0" prot="public" static="no">
        <type>std::nullptr_t</type>
        <definition>using extrait::Function&lt; Func &gt;::owner_t =  std::nullptr_t</definition>
        <argsstring></argsstring>
        <name>owner_t</name>
        <qualifiedname>extrait::Function&lt; Func &gt;::owner_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The class this is a member function of, or std::nullptr_t if it is not a member function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="240" column="9" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structextrait_1_1_function_3_01_func_01_4_1a0ded9f3e6ba7a61b9d8e57d3cc51c6fa" prot="public" static="no">
        <type>std::remove_reference_t&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">decltype</ref>(<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Func</ref>)&gt;</type>
        <definition>using extrait::Function&lt; Func &gt;::pointer_t =  std::remove_reference_t&lt;decltype(Func)&gt;</definition>
        <argsstring></argsstring>
        <name>pointer_t</name>
        <qualifiedname>extrait::Function&lt; Func &gt;::pointer_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The function pointer type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="243" column="9" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="243" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structextrait_1_1_function_3_01_func_01_4_1a0dc4be090de00f770791aa622e888367" prot="public" static="yes" mutable="no">
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">EXTRAIT_CONSTEXINI</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">int</ref></type>
        <definition>EXTRAIT_CONSTEXINI int extrait::Function&lt; Func &gt;::parameterCount</definition>
        <argsstring></argsstring>
        <name>parameterCount</name>
        <qualifiedname>extrait::Function&lt; Func &gt;::parameterCount</qualifiedname>
        <initializer>= sizeof...(<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Params</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The number of parameters the function has. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="247" column="39" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structextrait_1_1_function_3_01_func_01_4_1a4fff240966dac45706e97fd3657db957" prot="public" static="yes" mutable="no">
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">EXTRAIT_CONSTEXINI</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>EXTRAIT_CONSTEXINI bool extrait::Function&lt; Func &gt;::isMemberFunction</definition>
        <argsstring></argsstring>
        <name>isMemberFunction</name>
        <qualifiedname>extrait::Function&lt; Func &gt;::isMemberFunction</qualifiedname>
        <initializer>= <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">false</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets whether this function pointer is a member function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="250" column="40" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structextrait_1_1_function_3_01_func_01_4_1ad4bab1444db30fe48a55079f86592981" prot="public" static="yes" mutable="no">
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">EXTRAIT_CONSTEXINI</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>EXTRAIT_CONSTEXINI bool extrait::Function&lt; Func &gt;::isNoexcept</definition>
        <argsstring></argsstring>
        <name>isNoexcept</name>
        <qualifiedname>extrait::Function&lt; Func &gt;::isNoexcept</qualifiedname>
        <initializer>= <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">false</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets whether this function is marked non-throwing.<linebreak/>
 Sadly, as it stands currently, this will always return false as there is no reliable way to check for this yet. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="257" column="40" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structextrait_1_1_function_3_01_func_01_4_1af9e5e52861fd17bafec1c17f1851f006" prot="public" static="yes" mutable="no">
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">EXTRAIT_CONSTEXINI</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>EXTRAIT_CONSTEXINI bool extrait::Function&lt; Func &gt;::isConst</definition>
        <argsstring></argsstring>
        <name>isConst</name>
        <qualifiedname>extrait::Function&lt; Func &gt;::isConst</qualifiedname>
        <initializer>= <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">false</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets whether this function is const-qualified, for non-member functions this will always return false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="260" column="40" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structextrait_1_1_function_3_01_func_01_4_1a743ca0a506947582fd1bd13cf923033b" prot="public" static="yes" mutable="no">
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">EXTRAIT_CONSTEXINI</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>EXTRAIT_CONSTEXINI bool extrait::Function&lt; Func &gt;::isVolatile</definition>
        <argsstring></argsstring>
        <name>isVolatile</name>
        <qualifiedname>extrait::Function&lt; Func &gt;::isVolatile</qualifiedname>
        <initializer>= <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">false</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets whether this function is volatile-qualified, for non-member functions this will always return false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="263" column="40" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structextrait_1_1_function_3_01_func_01_4_1ab15e70ac974e9f17d7dc86247464120a" prot="public" static="yes" mutable="no">
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">EXTRAIT_CONSTEXINI</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>EXTRAIT_CONSTEXINI bool extrait::Function&lt; Func &gt;::isLValueQualified</definition>
        <argsstring></argsstring>
        <name>isLValueQualified</name>
        <qualifiedname>extrait::Function&lt; Func &gt;::isLValueQualified</qualifiedname>
        <initializer>= <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">false</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets whether this function is LValue-qualified, for non-member functions this will always return false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="266" column="40" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structextrait_1_1_function_3_01_func_01_4_1adb338c3a87f36a44b77590b07596d373" prot="public" static="yes" mutable="no">
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">EXTRAIT_CONSTEXINI</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <definition>EXTRAIT_CONSTEXINI bool extrait::Function&lt; Func &gt;::isRValueQualified</definition>
        <argsstring></argsstring>
        <name>isRValueQualified</name>
        <qualifiedname>extrait::Function&lt; Func &gt;::isRValueQualified</qualifiedname>
        <initializer>= <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">false</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets whether this function is RValue-qualified, for non-member functions this will always return false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="269" column="40" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="269" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structextrait_1_1_function_3_01_func_01_4_1a9a2d05016027aa6658c071f232fc45a2" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">U</ref></type>
          </param>
          <param>
            <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">constexpr</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">auto</ref></type>
        <definition>static constexpr auto extrait::Function&lt; Func &gt;::invoke</definition>
        <argsstring>(U *object, Args &amp;&amp;...args) EXTRAIT_NOEXDED((std</argsstring>
        <name>invoke</name>
        <qualifiedname>extrait::Function&lt; Func &gt;::invoke</qualifiedname>
        <param>
          <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">U</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Args</ref> &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invokes the function pointer with the given arguments, if possible.<linebreak/>
 If this is a free function pointer, the first argument will be ignored and can be a nullptr.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the object this function pointer is a member off </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to pass to the function pointer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the function call </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="281" column="31" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="281" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="structextrait_1_1_function_3_01_func_01_4_1af38d22819514716081de6f98d66ca25a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string extrait::Function&lt; Func &gt;::getFullyQualifiedName</definition>
        <argsstring>()</argsstring>
        <name>getFullyQualifiedName</name>
        <qualifiedname>extrait::Function&lt; Func &gt;::getFullyQualifiedName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="292" column="35" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="292" bodyend="295"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, false, false, false &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="4">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, false, false, true &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="3">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, false, true, false &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="5">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, false, true, true &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="10">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, true, false, false &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="12">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, true, false, true &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="11">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, true, true, false &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="13">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, true, true, true &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="6">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, true, false, false, false &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="8">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, true, false, false, true &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="7">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, true, false, true, false &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="9">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, true, false, true, true &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="1">
        <label>extrait::Function&lt; Func &gt;</label>
        <link refid="structextrait_1_1_function_3_01_func_01_4"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, false, false, false &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="4">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, false, false, true &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="3">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, false, true, false &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="5">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, false, true, true &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="10">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, true, false, false &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="12">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, true, false, true &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="11">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, true, true, false &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="13">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, false, true, true, true &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="6">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, true, false, false, false &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="8">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, true, false, false, true &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="7">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, true, false, true, false &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="9">
        <label>extrait::detail::MemBase&lt; T, false, Ret, T&lt; Params... &gt;, Func, true, false, true, true &gt;</label>
        <link refid="structextrait_1_1detail_1_1_mem_base"/>
      </node>
      <node id="1">
        <label>extrait::Function&lt; Func &gt;</label>
        <link refid="structextrait_1_1_function_3_01_func_01_4"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="200" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="200" bodyend="200"/>
    <listofallmembers>
      <member refid="structextrait_1_1_function_3_01_func_01_4_1af38d22819514716081de6f98d66ca25a" prot="public" virt="non-virtual"><scope>extrait::Function&lt; Func &gt;</scope><name>getFullyQualifiedName</name></member>
      <member refid="structextrait_1_1_function_3_01_func_01_4_1a9a2d05016027aa6658c071f232fc45a2" prot="public" virt="non-virtual"><scope>extrait::Function&lt; Func &gt;</scope><name>invoke</name></member>
      <member refid="structextrait_1_1_function_3_01_func_01_4_1af9e5e52861fd17bafec1c17f1851f006" prot="public" virt="non-virtual"><scope>extrait::Function&lt; Func &gt;</scope><name>isConst</name></member>
      <member refid="structextrait_1_1_function_3_01_func_01_4_1ab15e70ac974e9f17d7dc86247464120a" prot="public" virt="non-virtual"><scope>extrait::Function&lt; Func &gt;</scope><name>isLValueQualified</name></member>
      <member refid="structextrait_1_1_function_3_01_func_01_4_1a4fff240966dac45706e97fd3657db957" prot="public" virt="non-virtual"><scope>extrait::Function&lt; Func &gt;</scope><name>isMemberFunction</name></member>
      <member refid="structextrait_1_1_function_3_01_func_01_4_1ad4bab1444db30fe48a55079f86592981" prot="public" virt="non-virtual"><scope>extrait::Function&lt; Func &gt;</scope><name>isNoexcept</name></member>
      <member refid="structextrait_1_1_function_3_01_func_01_4_1adb338c3a87f36a44b77590b07596d373" prot="public" virt="non-virtual"><scope>extrait::Function&lt; Func &gt;</scope><name>isRValueQualified</name></member>
      <member refid="structextrait_1_1_function_3_01_func_01_4_1a743ca0a506947582fd1bd13cf923033b" prot="public" virt="non-virtual"><scope>extrait::Function&lt; Func &gt;</scope><name>isVolatile</name></member>
      <member refid="structextrait_1_1_function_3_01_func_01_4_1a221a3aa9d0105ba2810571ad718f1af0" prot="public" virt="non-virtual"><scope>extrait::Function&lt; Func &gt;</scope><name>owner_t</name></member>
      <member refid="structextrait_1_1_function_3_01_func_01_4_1a0dc4be090de00f770791aa622e888367" prot="public" virt="non-virtual"><scope>extrait::Function&lt; Func &gt;</scope><name>parameterCount</name></member>
      <member refid="structextrait_1_1_function_3_01_func_01_4_1a1eac06008af38582ad216ef1c62372f4" prot="public" virt="non-virtual"><scope>extrait::Function&lt; Func &gt;</scope><name>parameters_t</name></member>
      <member refid="structextrait_1_1_function_3_01_func_01_4_1a0ded9f3e6ba7a61b9d8e57d3cc51c6fa" prot="public" virt="non-virtual"><scope>extrait::Function&lt; Func &gt;</scope><name>pointer_t</name></member>
      <member refid="structextrait_1_1_function_3_01_func_01_4_1a1cbde1106fa379e72eff8e4bc950f574" prot="public" virt="non-virtual"><scope>extrait::Function&lt; Func &gt;</scope><name>return_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
