<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="structextrait_1_1_type_iterator_3_01_type_array_3_01_types_8_8_8_01_4_00_01sizeof_8_8_8_07_types_08_4" kind="struct" language="C++" prot="public">
    <compoundname>extrait::TypeIterator&lt; T&lt; Types... &gt;, sizeof...(Types)&gt;</compoundname>
    <basecompoundref refid="structextrait_1_1detail_1_1_type_iterator_base" prot="public" virt="non-virtual">extrait::detail::TypeIteratorBase&lt; TypeIterator, T&lt; Types... &gt;, sizeof...(Types)&gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> ...</type>
        <declname>Types</declname>
        <defname>Types</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structextrait_1_1_type_iterator_3_01_type_array_3_01_types_8_8_8_01_4_00_01sizeof_8_8_8_07_types_08_4_1ac47fc8c31f81407b74c1e3022dcecc8a" prot="public" static="no">
        <type><ref refid="structextrait_1_1_iterator_end" kindref="compound">IteratorEnd</ref></type>
        <definition>using extrait::TypeIterator&lt; T&lt; Types... &gt;, sizeof...(Types)&gt;::type =  IteratorEnd</definition>
        <argsstring></argsstring>
        <name>type</name>
        <qualifiedname>extrait::TypeIterator&lt; T&lt; Types... &gt;, sizeof...(Types)&gt;::type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The current type the iterator &quot;points&quot; to.<linebreak/>
 If this is past the end, this will return <ref refid="structextrait_1_1_iterator_end" kindref="compound">extrait::IteratorEnd</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_container.h" line="215" column="9" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_container.h" bodystart="215" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>extrait::detail::TypeIteratorBase&lt; TypeIterator, T&lt; Types... &gt;, sizeof...(Types)&gt;</label>
        <link refid="structextrait_1_1detail_1_1_type_iterator_base"/>
      </node>
      <node id="1">
        <label>extrait::TypeIterator&lt; T&lt; Types... &gt;, sizeof...(Types)&gt;</label>
        <link refid="structextrait_1_1_type_iterator_3_01_type_array_3_01_types_8_8_8_01_4_00_01sizeof_8_8_8_07_types_08_4"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>extrait::detail::TypeIteratorBase&lt; TypeIterator, T&lt; Types... &gt;, sizeof...(Types)&gt;</label>
        <link refid="structextrait_1_1detail_1_1_type_iterator_base"/>
      </node>
      <node id="1">
        <label>extrait::TypeIterator&lt; T&lt; Types... &gt;, sizeof...(Types)&gt;</label>
        <link refid="structextrait_1_1_type_iterator_3_01_type_array_3_01_types_8_8_8_01_4_00_01sizeof_8_8_8_07_types_08_4"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_container.h" line="208" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_container.h" bodystart="210" bodyend="216"/>
    <listofallmembers>
      <member refid="structextrait_1_1detail_1_1_type_iterator_base_1a1b939bc7317b124fc912b294560e2204" prot="public" virt="non-virtual"><scope>extrait::TypeIterator&lt; T&lt; Types... &gt;, sizeof...(Types)&gt;</scope><name>ArrayType</name></member>
      <member refid="structextrait_1_1detail_1_1_type_iterator_base_1a4d4aa5f424d418d8fb6611c6e4c8be1c" prot="public" virt="non-virtual"><scope>extrait::TypeIterator&lt; T&lt; Types... &gt;, sizeof...(Types)&gt;</scope><name>dec</name></member>
      <member refid="structextrait_1_1detail_1_1_type_iterator_base_1a83b0d1d71cbcbbf816b0ab3a6ce39d52" prot="public" virt="non-virtual"><scope>extrait::TypeIterator&lt; T&lt; Types... &gt;, sizeof...(Types)&gt;</scope><name>inc</name></member>
      <member refid="structextrait_1_1detail_1_1_type_iterator_base_1a6b70938890480420c4725ed8181229a4" prot="public" virt="non-virtual"><scope>extrait::TypeIterator&lt; T&lt; Types... &gt;, sizeof...(Types)&gt;</scope><name>index</name></member>
      <member refid="structextrait_1_1detail_1_1_type_iterator_base_1ad3426d4c5254850d72d301ce94e0a249" prot="public" virt="non-virtual"><scope>extrait::TypeIterator&lt; T&lt; Types... &gt;, sizeof...(Types)&gt;</scope><name>isEqual</name></member>
      <member refid="structextrait_1_1detail_1_1_type_iterator_base_1a2a25b073954b1eb0ac2a8e463b954811" prot="public" virt="non-virtual"><scope>extrait::TypeIterator&lt; T&lt; Types... &gt;, sizeof...(Types)&gt;</scope><name>isGreaterThan</name></member>
      <member refid="structextrait_1_1detail_1_1_type_iterator_base_1abd5df38dde0ad3f5394a174f26cf3723" prot="public" virt="non-virtual"><scope>extrait::TypeIterator&lt; T&lt; Types... &gt;, sizeof...(Types)&gt;</scope><name>isGreaterThanOrEqual</name></member>
      <member refid="structextrait_1_1detail_1_1_type_iterator_base_1a262c05a6482e0b51871887cc984ed181" prot="public" virt="non-virtual"><scope>extrait::TypeIterator&lt; T&lt; Types... &gt;, sizeof...(Types)&gt;</scope><name>isLessThan</name></member>
      <member refid="structextrait_1_1detail_1_1_type_iterator_base_1a269bf36857df60b754e609112e7db334" prot="public" virt="non-virtual"><scope>extrait::TypeIterator&lt; T&lt; Types... &gt;, sizeof...(Types)&gt;</scope><name>isLessThanOrEqual</name></member>
      <member refid="structextrait_1_1detail_1_1_type_iterator_base_1a5316832c8a07e23ea448702eeeb93f0e" prot="public" virt="non-virtual"><scope>extrait::TypeIterator&lt; T&lt; Types... &gt;, sizeof...(Types)&gt;</scope><name>isNotEqual</name></member>
      <member refid="structextrait_1_1detail_1_1_type_iterator_base_1aed64a95b128b789645e8176f54e11051" prot="public" virt="non-virtual"><scope>extrait::TypeIterator&lt; T&lt; Types... &gt;, sizeof...(Types)&gt;</scope><name>next</name></member>
      <member refid="structextrait_1_1detail_1_1_type_iterator_base_1a9eb3160266761919e562db31b4159522" prot="public" virt="non-virtual"><scope>extrait::TypeIterator&lt; T&lt; Types... &gt;, sizeof...(Types)&gt;</scope><name>prev</name></member>
      <member refid="structextrait_1_1_type_iterator_3_01_type_array_3_01_types_8_8_8_01_4_00_01sizeof_8_8_8_07_types_08_4_1ac47fc8c31f81407b74c1e3022dcecc8a" prot="public" virt="non-virtual"><scope>extrait::TypeIterator&lt; T&lt; Types... &gt;, sizeof...(Types)&gt;</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
