<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="group__get_actual_type_name" kind="group">
    <compoundname>getActualTypeName</compoundname>
    <title>extrait::getActualTypeName</title>
    <sectiondef kind="func">
      <memberdef kind="function" id="group__get_actual_type_name_1ga09e504879569026454b0aa254c56be04" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string extrait::getActualTypeName</definition>
        <argsstring>() noexcept</argsstring>
        <name>getActualTypeName</name>
        <qualifiedname>extrait::getActualTypeName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" line="273" column="24" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" bodystart="273" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="group__get_actual_type_name_1ga3cf0270de7450d57e77b79b3326b2a46" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string extrait::getActualTypeName</definition>
        <argsstring>(const T *const object) noexcept(noexcept(getActualTypeName&lt; T &gt;()))</argsstring>
        <name>getActualTypeName</name>
        <qualifiedname>extrait::getActualTypeName</qualifiedname>
        <param>
          <type>const T *const</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" line="282" column="24" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" bodystart="282" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="group__get_actual_type_name_1gab5dfcbfe5c68c139ed6984b120c023f4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string extrait::getActualTypeName</definition>
        <argsstring>(const T &amp;object) noexcept(noexcept(getActualTypeName&lt; T &gt;()))</argsstring>
        <name>getActualTypeName</name>
        <qualifiedname>extrait::getActualTypeName</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" line="291" column="24" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" bodystart="291" bodyend="295"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Retrieves the runtime type name of a type. </para>
    </briefdescription>
    <detaileddescription>
<para>Tries to retrieve the runtime type name for template parameter T.<linebreak/>
 On GCC and Clang, this will also demangle the symbol.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to get the runtime type name of (if function parameter object is given, this will be automatically deduced)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>(If given) Any instantiated object or object pointer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A std::string containing the runtime type name of type T </para>
</simplesect>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
