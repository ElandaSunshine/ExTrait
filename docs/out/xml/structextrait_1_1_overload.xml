<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="structextrait_1_1_overload" kind="struct" language="C++" prot="public">
    <compoundname>extrait::Overload</compoundname>
    <includes refid="reflection_8h" local="no">reflection.h</includes>
    <templateparamlist>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Signature</ref></type>
      </param>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref></type>
        <defval><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">void</ref></defval>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structextrait_1_1_overload_1aef0b7fbb7f1d6742313ab8c9d4340195" prot="public" static="no">
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Signature</ref></type>
        <definition>using extrait::Overload&lt; Signature, class &gt;::signature_t =  Signature</definition>
        <argsstring></argsstring>
        <name>signature_t</name>
        <qualifiedname>extrait::Overload::signature_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The signature type of the overload. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="337" column="9" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="337" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structextrait_1_1_overload_1a74cb3e025c54686c5a28a869796cde69" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Sig</ref></type>
            <defval><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Signature</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">EXTRAIT_CONSTEXVAL</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">auto</ref></type>
        <definition>static EXTRAIT_CONSTEXVAL auto extrait::Overload&lt; Signature, class &gt;::of</definition>
        <argsstring>(...) noexcept</argsstring>
        <name>of</name>
        <qualifiedname>extrait::Overload::of</qualifiedname>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the pointer of the specific overload.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function pointer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The overloaded function pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="348" column="40" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="348" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="structextrait_1_1_overload_1a8de79b47f35524397ba168bc909bd5f0" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Owner</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">EXTRAIT_CONSTEXVAL</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">auto</ref></type>
        <definition>static EXTRAIT_CONSTEXVAL auto extrait::Overload&lt; Signature, class &gt;::of</definition>
        <argsstring>(Signature Owner::*func) noexcept</argsstring>
        <name>of</name>
        <qualifiedname>extrait::Overload::of</qualifiedname>
        <param>
          <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Signature</ref> Owner::*</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the pointer of the specific overload.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function pointer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The overloaded function pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="362" column="40" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="362" bodyend="365"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Used to disambiguate function pointers that point to functions with one or more overloads.<linebreak/>
 <linebreak/>
 If you have a function pointer with several different overloads, it doesn&apos;t suffice to just pass that pointer to a <ref refid="classextrait_1_1_function" kindref="compound">extrait::Function</ref> template, you will need to specify the signature for a specific overload: <programlisting><codeline><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classextrait_1_1_function" kindref="compound">extrait::Function</ref>,<sp/><ref refid="structextrait_1_1_overload" kindref="compound">extrait::Overload</ref>;<sp/></highlight><highlight class="comment">//<sp/>Simplify<sp/>our<sp/>access<sp/>for<sp/>illustration<sp/>purposes</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">FirstFunc<sp/><sp/>=<sp/>Function&amp;lt;Overload&amp;lt;void()&gt;<ref refid="structextrait_1_1_overload_1a74cb3e025c54686c5a28a869796cde69" kindref="member">::of</ref>(test)&amp;gt;;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Works,<sp/>selects<sp/>&quot;void<sp/>test();&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">SecondFunc<sp/>=<sp/>Function&amp;lt;Overload&amp;lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<ref refid="structextrait_1_1_overload_1a74cb3e025c54686c5a28a869796cde69" kindref="member">::of</ref>(test)&amp;gt;;<sp/></highlight><highlight class="comment">//<sp/>Works,<sp/>selects<sp/>&quot;int<sp/>test(int);&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Func<sp/>=<sp/>Function&amp;lt;test&amp;gt;;<sp/></highlight><highlight class="comment">//<sp/>Errors,<sp/>which<sp/>overload<sp/>is<sp/>meant?</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>also<sp/>works<sp/>for<sp/>member<sp/>functions<sp/>of<sp/>course</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Test</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>different<sp/>qualification</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">FirstFunc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Function&amp;lt;Overload&amp;lt;void()&amp;gt;<ref refid="structextrait_1_1_overload_1a74cb3e025c54686c5a28a869796cde69" kindref="member">::of</ref>(&amp;Test::test)&amp;gt;;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Works,<sp/>selects<sp/>&quot;void<sp/>test();&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">SecondFunc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Function&amp;lt;Overload&amp;lt;void(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&amp;gt;<ref refid="structextrait_1_1_overload_1a74cb3e025c54686c5a28a869796cde69" kindref="member">::of</ref>(&amp;Test::test)&amp;gt;;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Works,<sp/>selects<sp/>&quot;int<sp/>test(int);&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">SecondFuncButConst<sp/>=<sp/>Function&amp;lt;Overload&amp;lt;void(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;gt;<ref refid="structextrait_1_1_overload_1a74cb3e025c54686c5a28a869796cde69" kindref="member">::of</ref>(&amp;Test::test)&amp;gt;;<sp/></highlight><highlight class="comment">//<sp/>Works,<sp/>selects<sp/>&quot;int<sp/>test(int)<sp/>const;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Func<sp/>=<sp/>Function&amp;lt;&amp;Test::test&amp;gt;;<sp/></highlight><highlight class="comment">//<sp/>Again,<sp/>doesn&apos;t<sp/>work,<sp/>we<sp/>are<sp/>not<sp/>telling<sp/>the<sp/>compiler<sp/>WHAT<sp/>function<sp/>we<sp/>are<sp/>actually<sp/>asking<sp/>for</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Signature</parametername>
</parameternamelist>
<parameterdescription>
<para>The function signature (e.g. &quot;void(int, double)&quot;) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="333" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="334" bodyend="366"/>
    <listofallmembers>
      <member refid="structextrait_1_1_overload_1a74cb3e025c54686c5a28a869796cde69" prot="public" virt="non-virtual"><scope>extrait::Overload</scope><name>of</name></member>
      <member refid="structextrait_1_1_overload_1a8de79b47f35524397ba168bc909bd5f0" prot="public" virt="non-virtual"><scope>extrait::Overload</scope><name>of</name></member>
      <member refid="structextrait_1_1_overload_1aef0b7fbb7f1d6742313ab8c9d4340195" prot="public" virt="non-virtual"><scope>extrait::Overload</scope><name>signature_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
