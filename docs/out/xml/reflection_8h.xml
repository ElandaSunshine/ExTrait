<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="reflection_8h" kind="file" language="C++">
    <compoundname>reflection.h</compoundname>
    <includes refid="define_8h" local="no">extrait/define.h</includes>
    <includes refid="common_8h" local="no">extrait/common.h</includes>
    <includes refid="type__list_8h" local="no">extrait/type_list.h</includes>
    <includes refid="type__container_8h" local="no">extrait/type_container.h</includes>
    <includes local="no">cassert</includes>
    <incdepgraph>
      <node id="3">
        <label>extrait/common.h</label>
        <link refid="common_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>extrait/define.h</label>
        <link refid="define_8h"/>
      </node>
      <node id="4">
        <label>detail/common_impl.h</label>
        <link refid="common__impl_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>detail/type_list_impl.h</label>
        <link refid="type__list__impl_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h</label>
        <link refid="reflection_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>extrait/type_container.h</label>
        <link refid="type__container_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>extrait/type_list.h</label>
        <link refid="type__list_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>cassert</label>
      </node>
      <node id="5">
        <label>cstddef</label>
      </node>
      <node id="6">
        <label>stdexcept</label>
      </node>
      <node id="7">
        <label>type_traits</label>
      </node>
      <node id="8">
        <label>typeinfo</label>
      </node>
    </incdepgraph>
    <innerclass refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca" prot="public">extrait::detail::MemBase&lt; T, IsNoexcept, Ret, T&lt; ParamTypes... &gt;, Func, LV, RV, CN, VOL &gt;</innerclass>
    <innerclass refid="structextrait_1_1_function_3_01_func_01_4" prot="public">extrait::Function&lt; Func &gt;</innerclass>
    <innerclass refid="structextrait_1_1_overload" prot="public">extrait::Overload</innerclass>
    <innerclass refid="structextrait_1_1_overload_3_01_signature_00_01std_1_1void__t_3_01decltype_07std_1_1declval_3_016a692dd87d6f7e08026643d8e9570858" prot="public">extrait::Overload&lt; Signature, std::void_t&lt; decltype(std::declval&lt; Signature * &gt;())&gt; &gt;</innerclass>
    <innerclass refid="structextrait_1_1is_member_function" prot="public">extrait::isMemberFunction</innerclass>
    <innerclass refid="structextrait_1_1is_const_qualified" prot="public">extrait::isConstQualified</innerclass>
    <innerclass refid="structextrait_1_1is_volatile_qualified" prot="public">extrait::isVolatileQualified</innerclass>
    <innerclass refid="structextrait_1_1is_lvalue_qualified" prot="public">extrait::isLvalueQualified</innerclass>
    <innerclass refid="structextrait_1_1is_rvalue_qualified" prot="public">extrait::isRvalueQualified</innerclass>
    <innerclass refid="structextrait_1_1parameter_count" prot="public">extrait::parameterCount</innerclass>
    <innerclass refid="structextrait_1_1parameter_list" prot="public">extrait::parameterList</innerclass>
    <innerclass refid="structextrait_1_1return_type" prot="public">extrait::returnType</innerclass>
    <innerclass refid="structextrait_1_1owner_type" prot="public">extrait::ownerType</innerclass>
    <innernamespace refid="namespaceextrait">extrait</innernamespace>
    <innernamespace refid="namespaceextrait_1_1detail">extrait::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="define_8h" kindref="compound">extrait/define.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="common_8h" kindref="compound">extrait/common.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="type__list_8h" kindref="compound">extrait/type_list.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="type__container_8h" kindref="compound">extrait/type_container.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">extrait</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//==================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//==============================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsNoexcept,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Ret,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Params,<sp/>auto<sp/>Func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>LV,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RV,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CN,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>VOL&gt;</highlight></codeline>
<codeline lineno="69" refid="structextrait_1_1detail_1_1_mem_base" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1detail_1_1_mem_base" kindref="compound">MemBase</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsNoexcept,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Ret,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>LV,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RV,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CN,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>VOL,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...ParamTypes&gt;</highlight></codeline>
<codeline lineno="73" refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1detail_1_1_mem_base" kindref="compound">MemBase</ref>&lt;T,<sp/>IsNoexcept,<sp/>Ret,<sp/><ref refid="structextrait_1_1_type_array" kindref="compound">T</ref>&lt;ParamTypes...&gt;,<sp/>Func,<sp/>LV,<sp/>RV,<sp/>CN,<sp/>VOL&gt;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//==========================================================================================================</highlight></codeline>
<codeline lineno="77" refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a4a6f071170f5811756488e72cbdab611" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1_type_array" kindref="compound">parameters_t</ref><sp/>=<sp/><ref refid="structextrait_1_1_type_array" kindref="compound">T</ref>&lt;ParamTypes...&gt;;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="80" refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a79b15b61ce1ee04bb4b57e555efd9d12" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a79b15b61ce1ee04bb4b57e555efd9d12" kindref="member">return_t</ref><sp/>=<sp/>Ret;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83" refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a38c6331f3feec245a1a2cd925d64b713" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a38c6331f3feec245a1a2cd925d64b713" kindref="member">owner_t</ref><sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86" refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a0ee95cfe3f198bd71f1859fd74aede58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a0ee95cfe3f198bd71f1859fd74aede58" kindref="member">pointer_t</ref><sp/>=<sp/>std::remove_reference_t&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(Func)&gt;;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="90" refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a0cb0f201d72f3b5ced874b7d0b9d8202" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXINI<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structextrait_1_1parameter_count" kindref="compound">parameterCount</ref><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(ParamTypes);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="93" refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a2b91f3bd29d49d483b78266387711ffd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXINI<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structextrait_1_1is_member_function" kindref="compound">isMemberFunction</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="101" refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1abc150acb1ed374beea4da542f1ec0f26" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXINI<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isNoexcept<sp/>=<sp/>IsNoexcept;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106" refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a04e1520deebfaffbed96d27caae107df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXINI<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structextrait_1_1is_const_qualified" kindref="compound">isConstQualified</ref><sp/>=<sp/>CN;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="112" refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1ad5392d84c1c1ea84309f9a58424cbfdb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXINI<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structextrait_1_1is_volatile_qualified" kindref="compound">isVolatileQualified</ref><sp/>=<sp/>VOL;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="117" refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1a1444ebc5d03d1e9dfccadd89b8da462c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXINI<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structextrait_1_1is_lvalue_qualified" kindref="compound">isLvalueQualified</ref><sp/>=<sp/>LV;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122" refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1ac47ee329e0ae35a107092c83dfb34145" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXINI<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structextrait_1_1is_rvalue_qualified" kindref="compound">isRvalueQualified</ref><sp/>=<sp/>RV;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">U,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...Args&gt;</highlight></codeline>
<codeline lineno="134" refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1ae476cc13269dc351c525a585baf95e30" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structextrait_1_1detail_1_1_mem_base_3_01_t_00_01_is_noexcept_00_01_ret_00_01_type_array_3_01_pae4651c9a525f56ca29c9af3f966d64ca_1ae476cc13269dc351c525a585baf95e30" kindref="member">invoke</ref>(U<sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>Args<sp/>&amp;&amp;...args)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTRAIT_NOEXDED((std::invoke(object-&gt;*Func,<sp/>std::forward&lt;Args&gt;(args)...)))</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::invoke(object-&gt;*Func,<sp/>std::forward&lt;Args&gt;(args)...))</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>A<sp/>member<sp/>function<sp/>needs<sp/>a<sp/>valid<sp/>object<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::invoke(object-&gt;*Func,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//==================================================================================================================</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...Parameters&gt;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">FunctionPointer_t<sp/>=<sp/>Ret(*)(Parameters...);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Owner,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...Parameters&gt;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">MemberFunctionPointer_t<sp/>=<sp/>Ret(Owner::*)(Parameters...);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Owner&gt;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">MemberObjectPointer_t<sp/>=<sp/>T<sp/>Owner::*;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//==================================================================================================================</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>Func&gt;</highlight></codeline>
<codeline lineno="196" refid="classextrait_1_1_function" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classextrait_1_1_function" kindref="compound">Function</ref>;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...Params,<sp/>Ret(T::*Func)(Params...)&gt;</highlight></codeline>
<codeline lineno="200" refid="structextrait_1_1_function_3_01_func_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/><ref refid="classextrait_1_1_function" kindref="compound">Function</ref>&lt;Func&gt;<sp/>:<sp/>detail::MemBase&lt;T,<sp/>false,<sp/>Ret,<sp/><ref refid="structextrait_1_1_type_array" kindref="compound">T</ref>&lt;Params...&gt;,<sp/>Func,<sp/>false,<sp/>false,<sp/>false,<sp/>false&gt;<sp/>{};</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...Params,<sp/>Ret(T::*Func)(Params...)<sp/>const&gt;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/><ref refid="classextrait_1_1_function" kindref="compound">Function</ref>&lt;Func&gt;<sp/>:<sp/>detail::MemBase&lt;T,<sp/>false,<sp/>Ret,<sp/><ref refid="structextrait_1_1_type_array" kindref="compound">T</ref>&lt;Params...&gt;,<sp/>Func,<sp/>false,<sp/>false,<sp/>true,<sp/>false&gt;<sp/>{};</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...Params,<sp/>Ret(T::*Func)(Params...)<sp/>volatile&gt;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>Function&lt;Func&gt;<sp/>:<sp/>detail::MemBase&lt;T,<sp/>false,<sp/>Ret,<sp/>T&lt;Params...&gt;,<sp/>Func,<sp/>false,<sp/>false,<sp/>false,<sp/>true&gt;<sp/>{};</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...Params,<sp/>Ret(T::*Func)(Params...)<sp/>volatile<sp/>const&gt;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>Function&lt;Func&gt;<sp/>:<sp/>detail::MemBase&lt;T,<sp/>false,<sp/>Ret,<sp/>T&lt;Params...&gt;,<sp/>Func,<sp/>false,<sp/>false,<sp/>true,<sp/>true&gt;<sp/>{};</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...Params,<sp/>Ret(T::*Func)(Params...)<sp/>&amp;&gt;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>Function&lt;Func&gt;<sp/>:<sp/>detail::MemBase&lt;T,<sp/>false,<sp/>Ret,<sp/>T&lt;Params...&gt;,<sp/>Func,<sp/>true,<sp/>false,<sp/>false,<sp/>false&gt;<sp/>{};</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...Params,<sp/>Ret(T::*Func)(Params...)<sp/>const<sp/>&amp;&gt;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>Function&lt;Func&gt;<sp/>:<sp/>detail::MemBase&lt;T,<sp/>false,<sp/>Ret,<sp/>T&lt;Params...&gt;,<sp/>Func,<sp/>true,<sp/>false,<sp/>true,<sp/>false&gt;<sp/>{};</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...Params,<sp/>Ret(T::*Func)(Params...)<sp/>volatile<sp/>&amp;&gt;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>Function&lt;Func&gt;<sp/>:<sp/>detail::MemBase&lt;T,<sp/>false,<sp/>Ret,<sp/>T&lt;Params...&gt;,<sp/>Func,<sp/>true,<sp/>false,<sp/>false,<sp/>true&gt;<sp/>{};</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...Params,<sp/>Ret(T::*Func)(Params...)<sp/>volatile<sp/>const<sp/>&amp;&gt;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>Function&lt;Func&gt;<sp/>:<sp/>detail::MemBase&lt;T,<sp/>false,<sp/>Ret,<sp/>T&lt;Params...&gt;,<sp/>Func,<sp/>true,<sp/>false,<sp/>true,<sp/>true&gt;<sp/>{};</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...Params,<sp/>Ret(T::*Func)(Params...)<sp/>&amp;&amp;&gt;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>Function&lt;Func&gt;<sp/>:<sp/>detail::MemBase&lt;T,<sp/>false,<sp/>Ret,<sp/>T&lt;Params...&gt;,<sp/>Func,<sp/>false,<sp/>true,<sp/>false,<sp/>false&gt;<sp/>{};</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...Params,<sp/>Ret(T::*Func)(Params...)<sp/>const<sp/>&amp;&amp;&gt;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>Function&lt;Func&gt;<sp/>:<sp/>detail::MemBase&lt;T,<sp/>false,<sp/>Ret,<sp/>T&lt;Params...&gt;,<sp/>Func,<sp/>false,<sp/>true,<sp/>true,<sp/>false&gt;<sp/>{};</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...Params,<sp/>Ret(T::*Func)(Params...)<sp/>volatile<sp/>&amp;&amp;&gt;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>Function&lt;Func&gt;<sp/>:<sp/>detail::MemBase&lt;T,<sp/>false,<sp/>Ret,<sp/>T&lt;Params...&gt;,<sp/>Func,<sp/>false,<sp/>true,<sp/>false,<sp/>true&gt;<sp/>{};</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...Params,<sp/>Ret(T::*Func)(Params...)<sp/>volatile<sp/>const<sp/>&amp;&amp;&gt;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>Function&lt;Func&gt;<sp/>:<sp/>detail::MemBase&lt;T,<sp/>false,<sp/>Ret,<sp/>T&lt;Params...&gt;,<sp/>Func,<sp/>false,<sp/>true,<sp/>true,<sp/>true&gt;<sp/>{};</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...Params,<sp/>Ret(*Func)(Params...)&gt;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Function&lt;Func&gt;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//==============================================================================================================</highlight></codeline>
<codeline lineno="234" refid="structextrait_1_1_function_3_01_func_01_4_1a1eac06008af38582ad216ef1c62372f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1_type_array" kindref="compound">parameters_t</ref><sp/>=<sp/><ref refid="structextrait_1_1_type_array" kindref="compound">T</ref>&lt;Params...&gt;;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="237" refid="structextrait_1_1_function_3_01_func_01_4_1a1cbde1106fa379e72eff8e4bc950f574" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1_function_3_01_func_01_4_1a1cbde1106fa379e72eff8e4bc950f574" kindref="member">return_t</ref><sp/>=<sp/>Ret;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="240" refid="structextrait_1_1_function_3_01_func_01_4_1a221a3aa9d0105ba2810571ad718f1af0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1_function_3_01_func_01_4_1a221a3aa9d0105ba2810571ad718f1af0" kindref="member">owner_t</ref><sp/>=<sp/>std::nullptr_t;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="243" refid="structextrait_1_1_function_3_01_func_01_4_1a0ded9f3e6ba7a61b9d8e57d3cc51c6fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1_function_3_01_func_01_4_1a0ded9f3e6ba7a61b9d8e57d3cc51c6fa" kindref="member">pointer_t</ref><sp/>=<sp/>std::remove_reference_t&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(Func)&gt;;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="247" refid="structextrait_1_1_function_3_01_func_01_4_1a0dc4be090de00f770791aa622e888367" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXINI<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structextrait_1_1parameter_count" kindref="compound">parameterCount</ref><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Params);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="250" refid="structextrait_1_1_function_3_01_func_01_4_1a4fff240966dac45706e97fd3657db957" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXINI<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structextrait_1_1is_member_function" kindref="compound">isMemberFunction</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="257" refid="structextrait_1_1_function_3_01_func_01_4_1ad4bab1444db30fe48a55079f86592981" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXINI<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isNoexcept<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="260" refid="structextrait_1_1_function_3_01_func_01_4_1af9e5e52861fd17bafec1c17f1851f006" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXINI<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="263" refid="structextrait_1_1_function_3_01_func_01_4_1a743ca0a506947582fd1bd13cf923033b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXINI<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isVolatile<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="266" refid="structextrait_1_1_function_3_01_func_01_4_1ab15e70ac974e9f17d7dc86247464120a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXINI<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLValueQualified<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="269" refid="structextrait_1_1_function_3_01_func_01_4_1adb338c3a87f36a44b77590b07596d373" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXINI<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isRValueQualified<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">U,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...Args&gt;</highlight></codeline>
<codeline lineno="281" refid="structextrait_1_1_function_3_01_func_01_4_1a9a2d05016027aa6658c071f232fc45a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structextrait_1_1_function_3_01_func_01_4_1a9a2d05016027aa6658c071f232fc45a2" kindref="member">invoke</ref>([[maybe_unused]]<sp/>U<sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>Args<sp/>&amp;&amp;...args)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTRAIT_NOEXDED((std::invoke(Func,<sp/>std::forward&lt;Args&gt;(args)...)))</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::invoke(Func,<sp/>std::forward&lt;Args&gt;(args)...))</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::invoke(Func,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>Gets<sp/>the<sp/>fully<sp/>qualified<sp/>name<sp/>of<sp/>this<sp/>function</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>getFullyQualifiedName()</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//==================================================================================================================</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Signature,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="333" refid="structextrait_1_1_overload" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1_overload" kindref="compound">Overload</ref></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//==============================================================================================================</highlight></codeline>
<codeline lineno="337" refid="structextrait_1_1_overload_1aef0b7fbb7f1d6742313ab8c9d4340195" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1_overload_1aef0b7fbb7f1d6742313ab8c9d4340195" kindref="member">signature_t</ref><sp/>=<sp/>Signature;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Sig<sp/>=<sp/>Signature&gt;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[nodiscard]]</highlight></codeline>
<codeline lineno="348" refid="structextrait_1_1_overload_1a74cb3e025c54686c5a28a869796cde69" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXVAL<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structextrait_1_1_overload_1a74cb3e025c54686c5a28a869796cde69" kindref="member">of</ref>(...)<sp/>noexcept</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(dependantTypeAssert_v&lt;Sig&gt;,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Argument<sp/>is<sp/>not<sp/>a<sp/>function<sp/>pointer<sp/>or<sp/>an<sp/>overload<sp/>that<sp/>doesn&apos;t<sp/>exist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Owner&gt;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[nodiscard]]</highlight></codeline>
<codeline lineno="362" refid="structextrait_1_1_overload_1a8de79b47f35524397ba168bc909bd5f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXVAL<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structextrait_1_1_overload_1a8de79b47f35524397ba168bc909bd5f0" kindref="member">of</ref>(Signature<sp/>Owner::*<sp/>func)<sp/>noexcept</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>func;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Signature&gt;</highlight></codeline>
<codeline lineno="369" refid="structextrait_1_1_overload_3_01_signature_00_01std_1_1void__t_3_01decltype_07std_1_1declval_3_016a692dd87d6f7e08026643d8e9570858" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1_overload" kindref="compound">Overload</ref>&lt;Signature,<sp/>std::void_t&lt;decltype(std::declval&lt;Signature*&gt;())&gt;&gt;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//==============================================================================================================</highlight></codeline>
<codeline lineno="373" refid="structextrait_1_1_overload_3_01_signature_00_01std_1_1void__t_3_01decltype_07std_1_1declval_3_016a692dd87d6f7e08026643d8e9570858_1a9fa1b3ec1d045ff9e40e63b97eba2616" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1_overload_3_01_signature_00_01std_1_1void__t_3_01decltype_07std_1_1declval_3_016a692dd87d6f7e08026643d8e9570858_1a9fa1b3ec1d045ff9e40e63b97eba2616" kindref="member">signature_t</ref><sp/>=<sp/>Signature;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[nodiscard]]</highlight></codeline>
<codeline lineno="383" refid="structextrait_1_1_overload_3_01_signature_00_01std_1_1void__t_3_01decltype_07std_1_1declval_3_016a692dd87d6f7e08026643d8e9570858_1a8c408f3888606fd8ab55c542e65073f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXVAL<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structextrait_1_1_overload_3_01_signature_00_01std_1_1void__t_3_01decltype_07std_1_1declval_3_016a692dd87d6f7e08026643d8e9570858_1a8c408f3888606fd8ab55c542e65073f0" kindref="member">of</ref>(Signature*<sp/>func)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>func;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Owner&gt;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[nodiscard]]</highlight></codeline>
<codeline lineno="396" refid="structextrait_1_1_overload_3_01_signature_00_01std_1_1void__t_3_01decltype_07std_1_1declval_3_016a692dd87d6f7e08026643d8e9570858_1abc3629e1d80b8603f880d85140992c82" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXVAL<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structextrait_1_1_overload_3_01_signature_00_01std_1_1void__t_3_01decltype_07std_1_1declval_3_016a692dd87d6f7e08026643d8e9570858_1abc3629e1d80b8603f880d85140992c82" kindref="member">of</ref>(Signature<sp/>Owner::*<sp/>func)<sp/>noexcept</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>func;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//==================================================================================================================</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>Func&gt;</highlight></codeline>
<codeline lineno="408" refid="structextrait_1_1is_member_function" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1is_member_function" kindref="compound">isMemberFunction</ref><sp/>:<sp/>std::bool_constant&lt;Function&lt;Func&gt;::isMemberFunction&gt;<sp/>{};</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>Func&gt;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXINI<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMemberFunction_v<sp/>=<sp/><ref refid="structextrait_1_1is_member_function" kindref="compound">isMemberFunction&lt;Func&gt;::value</ref>;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>Func&gt;</highlight></codeline>
<codeline lineno="421" refid="structextrait_1_1is_const_qualified" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1is_const_qualified" kindref="compound">isConstQualified</ref><sp/>:<sp/>std::bool_constant&lt;Function&lt;Func&gt;::isConstQualified&gt;<sp/>{};</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>Func&gt;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXINI<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstQualified_v<sp/>=<sp/><ref refid="structextrait_1_1is_const_qualified" kindref="compound">isConstQualified&lt;Func&gt;::value</ref>;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>Func&gt;</highlight></codeline>
<codeline lineno="434" refid="structextrait_1_1is_volatile_qualified" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1is_volatile_qualified" kindref="compound">isVolatileQualified</ref><sp/>:<sp/>std::bool_constant&lt;Function&lt;Func&gt;::isVolatileQualified&gt;<sp/>{};</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>Func&gt;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXINI<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isVolatileQualified_v<sp/>=<sp/><ref refid="structextrait_1_1is_volatile_qualified" kindref="compound">isVolatileQualified&lt;Func&gt;::value</ref>;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>Func&gt;</highlight></codeline>
<codeline lineno="447" refid="structextrait_1_1is_lvalue_qualified" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1is_lvalue_qualified" kindref="compound">isLvalueQualified</ref><sp/>:<sp/>std::bool_constant&lt;Function&lt;Func&gt;::isLvalueQualified&gt;<sp/>{};</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>Func&gt;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXINI<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLvalueQualified_v<sp/>=<sp/><ref refid="structextrait_1_1is_lvalue_qualified" kindref="compound">isLvalueQualified&lt;Func&gt;::value</ref>;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>Func&gt;</highlight></codeline>
<codeline lineno="460" refid="structextrait_1_1is_rvalue_qualified" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1is_rvalue_qualified" kindref="compound">isRvalueQualified</ref><sp/>:<sp/>std::bool_constant&lt;Function&lt;Func&gt;::isRvalueQualified&gt;<sp/>{};</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>Func&gt;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXINI<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isRvalueQualified_v<sp/>=<sp/><ref refid="structextrait_1_1is_rvalue_qualified" kindref="compound">isRvalueQualified&lt;Func&gt;::value</ref>;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>Func&gt;</highlight></codeline>
<codeline lineno="471" refid="structextrait_1_1parameter_count" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1parameter_count" kindref="compound">parameterCount</ref><sp/>:<sp/>std::integral_constant&lt;std::size_t,<sp/>Function&lt;Func&gt;::parameterCount&gt;<sp/>{};</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>Func&gt;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTRAIT_CONSTEXINI<sp/>std::size_t<sp/>parameterCount_v<sp/>=<sp/><ref refid="structextrait_1_1parameter_count" kindref="compound">parameterCount&lt;Func&gt;::value</ref>;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>Func&gt;</highlight></codeline>
<codeline lineno="482" refid="structextrait_1_1parameter_list" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1parameter_list" kindref="compound">parameterList</ref><sp/>:<sp/>detail::TypeConstant&lt;typename<sp/>Function&lt;Func&gt;::parameters_t&gt;<sp/>{};</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>Func&gt;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">parameterList_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structextrait_1_1parameter_list" kindref="compound">parameterList&lt;Func&gt;::type</ref>;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>Func&gt;</highlight></codeline>
<codeline lineno="493" refid="structextrait_1_1return_type" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1return_type" kindref="compound">returnType</ref><sp/>:<sp/>detail::TypeConstant&lt;typename<sp/>Function&lt;Func&gt;::return_t&gt;<sp/>{};</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>Func&gt;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">returnType_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structextrait_1_1return_type" kindref="compound">returnType&lt;Func&gt;::type</ref>;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>Func&gt;</highlight></codeline>
<codeline lineno="504" refid="structextrait_1_1owner_type" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structextrait_1_1owner_type" kindref="compound">ownerType</ref><sp/>:<sp/>detail::TypeConstant&lt;typename<sp/>Function&lt;Func&gt;::owner&gt;<sp/>{};</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>Func&gt;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ownerType_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structextrait_1_1owner_type" kindref="compound">ownerType&lt;Func&gt;::type</ref>;</highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h"/>
  </compounddef>
</doxygen>
