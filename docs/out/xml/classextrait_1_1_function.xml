<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="classextrait_1_1_function" kind="class" language="C++" prot="public">
    <compoundname>extrait::Function</compoundname>
    <templateparamlist>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">auto</ref></type>
        <declname>Func</declname>
        <defname>Func</defname>
      </param>
    </templateparamlist>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Describes a function pointer and its attributes.<linebreak/>
 With this class you can request any (currently attainable) information about function pointers, such as their different qualifications, their ownership, return type, parameter types and so on.<linebreak/>
 <linebreak/>
 This will not just work with functions that have overloads, for these cases there is the <ref refid="structextrait_1_1_overload" kindref="compound">extrait::Overload</ref> class, which allows defining the function signature in question: <programlisting><codeline><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classextrait_1_1_function" kindref="compound">extrait::Function</ref>,<sp/><ref refid="structextrait_1_1_overload" kindref="compound">extrait::Overload</ref>;<sp/></highlight><highlight class="comment">//<sp/>Simplify<sp/>our<sp/>access<sp/>for<sp/>illustration<sp/>purposes</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>overloadedFunc();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>overloadedFunc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Func1<sp/>=<sp/>Function&amp;lt;Overload&amp;lt;void()&amp;gt;::of(overloadedFunc)&amp;gt;;<sp/></highlight><highlight class="comment">//<sp/>Works,<sp/>we<sp/>get<sp/>the<sp/>first<sp/>overload<sp/>&quot;void<sp/>overloadedFunc();&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Func2<sp/>=<sp/>Function&amp;lt;Overload&amp;lt;void(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&amp;gt;::of(overloadedFunc)&amp;gt;;<sp/></highlight><highlight class="comment">//<sp/>Works,<sp/>we<sp/>get<sp/>the<sp/>second<sp/>overload<sp/>&quot;void<sp/>overloadedFunc(int);&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Func<sp/>=<sp/>Function&amp;lt;overloadedFunc&amp;gt;;<sp/></highlight><highlight class="comment">//<sp/>Does<sp/>not<sp/>work,<sp/>we<sp/>don&apos;t<sp/>know<sp/>the<sp/>specific<sp/>overload</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function pointer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" line="196" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/reflection.h" bodystart="196" bodyend="-1"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
