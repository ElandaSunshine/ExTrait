<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="structextrait_1_1remove_at" kind="struct" language="C++" prot="public">
    <compoundname>extrait::removeAt</compoundname>
    <basecompoundref refid="structextrait_1_1detail_1_1remove_at" prot="public" virt="non-virtual">extrait::detail::removeAt&lt; T, I &gt;</basecompoundref>
    <includes refid="type__list_8h" local="no">type_list.h</includes>
    <templateparamlist>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref></type>
      </param>
      <param>
        <type><ref refid="common_8h_1a6ba49602a991431d5274a29e1a5e5b61" kindref="member">index_t</ref></type>
        <declname>I</declname>
        <defname>I</defname>
      </param>
    </templateparamlist>
    <briefdescription>
<para>Removes a type at a given index inside a template parameter-list. </para>
    </briefdescription>
    <detaileddescription>
<para>Removes the type at position I inside the parameter-list of class template instantiation T and provides a member alias &quot;type&quot; for an instantiation of class template T with the new parameter-list, otherwise T.</para>
<para>If I is not less than the number of template arguments in the template parameter-list of T, then compilation will fail. <linebreak/>
 For an empty class template instantiation of T, index will always be out of bounds and so cause compilation to fail.</para>
<para>If T is not a class template or is a class template with at least one non-type template parameter, compilation will fail.</para>
<para>Any modification to T, such as pointer, reference, array or cv-qualification of the original type, will render the type a non-class template type and compilation will fail. <linebreak/>
 In these cases you can use <ref refid="structextrait_1_1strip" kindref="compound">extrait::strip</ref> to strip any of these modifications off the type beforehand.</para>
<para>Adding custom template specialisations to this template results in undefined behaviour.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Any valid type-only class template instantiation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the type to remove</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="structextrait_1_1remove" kindref="compound">extrait::remove</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structextrait_1_1replace_all" kindref="compound">extrait::replaceAll</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structextrait_1_1replace_range" kindref="compound">extrait::replaceRange</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structextrait_1_1remove_if" kindref="compound">extrait::removeIf</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structextrait_1_1filter" kindref="compound">extrait::filter</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structextrait_1_1strip" kindref="compound">extrait::strip</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structextrait_1_1instantiates_class_template" kindref="compound">extrait::instantiatesClassTemplate</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structextrait_1_1_type_array" kindref="compound">extrait::T</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>extrait::detail::removeAt&lt; T, I &gt;</label>
        <link refid="structextrait_1_1detail_1_1remove_at"/>
      </node>
      <node id="1">
        <label>extrait::removeAt&lt; T, I &gt;</label>
        <link refid="structextrait_1_1remove_at"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>extrait::detail::removeAt&lt; T, I &gt;</label>
        <link refid="structextrait_1_1detail_1_1remove_at"/>
      </node>
      <node id="1">
        <label>extrait::removeAt&lt; T, I &gt;</label>
        <link refid="structextrait_1_1remove_at"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1176" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1176" bodyend="1176"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
