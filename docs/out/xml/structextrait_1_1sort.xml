<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="structextrait_1_1sort" kind="struct" language="C++" prot="public">
    <compoundname>extrait::sort</compoundname>
    <basecompoundref refid="structextrait_1_1detail_1_1sort" prot="public" virt="non-virtual">extrait::detail::sort&lt; T, Comparator &gt;</basecompoundref>
    <includes refid="type__list_8h" local="no">type_list.h</includes>
    <templateparamlist>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref></type>
      </param>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">template</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> &gt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref></type>
        <declname>Comparator</declname>
        <defname>Comparator</defname>
      </param>
    </templateparamlist>
    <briefdescription>
<para>Sorts the types in a parameter-list. </para>
    </briefdescription>
    <detaileddescription>
<para>Provides a member alias &quot;type&quot; that is a copy of the parameter-list of class template instantiation T with every type in the parameter-list sorted through a comparison class template. <linebreak/>
 The resulting parameter-list will always be the same length as the input parameter-list.</para>
<para>Where Comparator is a class template that takes two types as arguments, where the first argument is a type that in the current comparison pass is compared to the key type and the second argument is the key type that is compared to every type preceding it, this class template must provide a static constant expression &quot;value&quot; that determines true if the key type should be ordered before the compared type. <linebreak/>
 The order between equal elements is the same order as they appeared in the input template, that means that if T1 and T2 share the same comparative potential and T1 appears before T2 in the parameter-list, T1 will also be ordered before T2 in the resultant parameter-list.</para>
<para>If T is not a class template or is a class template with at least one non-type template parameter, compilation will fail.</para>
<para>Any modification to T, such as pointer, reference, array or cv-qualification of the original type, will render the type a non-class template type and compilation will fail. <linebreak/>
 In these cases you can use <ref refid="structextrait_1_1strip" kindref="compound">extrait::strip</ref> to strip any of these modifications off the type beforehand.</para>
<para>Adding custom template specialisations to this template results in undefined behaviour.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Any valid type-only class template instantiation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Comparator</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type satisfying a valid comparing type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="structextrait_1_1strip" kindref="compound">extrait::strip</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structextrait_1_1instantiates_class_template" kindref="compound">extrait::instantiatesClassTemplate</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structextrait_1_1_type_array" kindref="compound">extrait::T</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>extrait::sort&lt; T, Comparator &gt;</label>
        <link refid="structextrait_1_1sort"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>extrait::detail::sort&lt; T, Comparator &gt;</label>
        <link refid="structextrait_1_1detail_1_1sort"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>extrait::sort&lt; T, Comparator &gt;</label>
        <link refid="structextrait_1_1sort"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>extrait::detail::sort&lt; T, Comparator &gt;</label>
        <link refid="structextrait_1_1detail_1_1sort"/>
      </node>
    </collaborationgraph>
    <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" line="1664" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/type_list.h" bodystart="1664" bodyend="1664"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
