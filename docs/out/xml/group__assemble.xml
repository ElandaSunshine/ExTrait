<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="group__assemble" kind="group">
    <compoundname>assemble</compoundname>
    <title>extrait::assemble</title>
    <innerclass refid="structextrait_1_1branch" prot="public">extrait::branch</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__assemble_1gad17992b15c8062cf818daebfb502cb9a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>class ...</type>
            <declname>Branches</declname>
            <defname>Branches</defname>
          </param>
        </templateparamlist>
        <type>typename assemble&lt; T, Branches... &gt;::type</type>
        <definition>using extrait::assemble_t =  typename assemble&lt;T, Branches...&gt;::type</definition>
        <argsstring></argsstring>
        <name>assemble_t</name>
        <qualifiedname>extrait::assemble_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1assemble" kindref="compound">extrait::assemble</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" line="223" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" bodystart="223" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Assembles a parameter-list based on conditions. </para>
    </briefdescription>
    <detaileddescription>
<para>Evaluates instantiations of <ref refid="structextrait_1_1branch" kindref="compound">extrait::branch</ref> in list Branches and provides a new instantiation of class template T with a parameter-list consisting of the associated branch types that evaluated to true and all given non-branch types.<linebreak/>
 If a type in list Branches is a non-branch type, this type will inevitably end up in the resulting parameter-list at the position it was specified in.</para>
<para>Adding custom template specialisations to this template results in undefined behaviour.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Any valid type-only class template that can take enough arguments </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Branches</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of <ref refid="structextrait_1_1branch" kindref="compound">extrait::branch</ref> instantiations or optionally other types</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="structextrait_1_1select" kindref="compound">extrait::select</ref> </para>
</simplesect>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
