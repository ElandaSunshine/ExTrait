<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="group__type__list__lib" kind="group">
    <compoundname>type_list_lib</compoundname>
    <title>Type List Library</title>
    <briefdescription>
<para>Deals with the transformation and querying of type-only class template parameter-lists. </para>
    </briefdescription>
    <detaileddescription>
<sect1 id="group__type__list__lib_1nomenclature">
<title>Nomenclature</title><para>Throughout this document there will be certain used terminology that is not defined in the C++ standard, this section is to shed some light on any upcoming potential confusion.</para>
<sect2 id="group__type__list__lib_1def_type_list">
<title>Type List</title><para>Any mention of the term <emphasis>type list</emphasis> in this document refers to the parameter-list of an instantiated class template that consists solely of types, any non-type or template type template argument is excluded from this wording and thus, if part of a template parameter-list, shall not be defined as part of a <emphasis>type list</emphasis> any longer.</para>
<para>Any mention of <emphasis>type list</emphasis> is solely referring to a parameter-list of an instantiated class template, by that means, the declaration of template parameters in a class template can not be regarded as a type list.</para>
<para>A type T is said to be <bold>type list conform</bold>, if T is a class template with at least one to (hypothetically) infinite type parameters.</para>
</sect2>
<sect2 id="group__type__list__lib_1def_query_trait">
<title>Query Trait</title><para>A <emphasis>query trait</emphasis> is a class template that always provides a static <computeroutput>value</computeroutput> constant that evaluates to a constant expression determining specific attributes of the input given as template arguments to the trait, this guarantee must only be given as long as nothing statically asserted inside such a trait.</para>
</sect2>
<sect2 id="group__type__list__lib_1def_transformative_trait">
<title>Transformative Trait</title><para>A <emphasis>transformative trait</emphasis> is a class template that always provides a member alias <computeroutput>type</computeroutput> which aliases the transformed type based on the input given as template arguments to the trait, this guarantee must only be given as long as nothing statically asserted inside such a trait.</para>
</sect2>
</sect1>
<sect1 id="group__type__list__lib_1summary">
<title>Summary</title><para>The <bold>Type List Library</bold> deals with the transformation and identification of type lists<ref refid="group__type__list__lib_1def_type_list" kindref="member"><superscript>[1]</superscript></ref>.</para>
<para>A good example of a type list conform<ref refid="group__type__list__lib_1def_type_list" kindref="member"><superscript>[1]</superscript></ref> type is std::tuple, which is a class template that can take an arbitrary amount of type template arguments.</para>
<para>ExTrait also provides <ref refid="structextrait_1_1_type_array" kindref="compound">extrait::T</ref> which is a little more lightweight than std::tuple and thus is a perfect fit for any type list<ref refid="group__type__list__lib_1def_type_list" kindref="member"><superscript>[1]</superscript></ref> related needs, which can be used to inspect its own type list and give back a transformed version.</para>
<para>Another example would be std::vector, std::list or std::basic_string, however, these might have internal language-specific constraints on their template arguments and make them a little difficult to handle, nevertheless, if handled carefully they might be a good fit as well.</para>
</sect1>
<sect1 id="group__type__list__lib_1type_traits">
<title>Type Traits</title><para>The Type-List library comes with a set of easy-to-use and elaborate utility traits that allow transformation<ref refid="group__type__list__lib_1def_transformative_trait" kindref="member"><superscript>[3]</superscript></ref> and queries<ref refid="group__type__list__lib_1def_query_trait" kindref="member"><superscript>[2]</superscript></ref> to inputted type lists.<ref refid="group__type__list__lib_1def_type_list" kindref="member"><superscript>[1]</superscript></ref></para>
</sect1>
<sect1 id="group__type__list__lib_1variables">
<title>Variables</title><para><ref refid="type__list_8h_1a8972fb9c0ed6b56a014ecd4cb6cdbf64" kindref="member">extrait::endOfParameterList</ref> </para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
