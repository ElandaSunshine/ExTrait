<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="structextrait_1_1detail_1_1replace_if__impl_3_01_p_00_01_t_3_01_t_types_8_8_8_01_4_00_01_u_3_01_6af2bc37177c7b14f5231f81d7378361" kind="struct" language="C++" prot="public">
    <compoundname>extrait::detail::replaceIf_impl&lt; P, T&lt; Types... &gt;, U&lt; UTypes... &gt;, I, Invert, Next, Types... &gt;</compoundname>
    <templateparamlist>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">template</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> &gt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref></type>
        <declname>P</declname>
        <defname>P</defname>
      </param>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">template</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> ... &gt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref></type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">template</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> ... &gt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref></type>
        <declname>U</declname>
        <defname>U</defname>
      </param>
      <param>
        <type>index_t</type>
        <declname>I</declname>
        <defname>I</defname>
      </param>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">bool</ref></type>
        <declname>Invert</declname>
        <defname>Invert</defname>
      </param>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> ...</type>
        <declname>Types</declname>
        <defname>Types</defname>
      </param>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Next</ref></type>
      </param>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> ...</type>
        <declname>Types</declname>
        <defname>Types</defname>
      </param>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> ...</type>
        <declname>UTypes</declname>
        <defname>UTypes</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structextrait_1_1detail_1_1replace_if__impl_3_01_p_00_01_t_3_01_t_types_8_8_8_01_4_00_01_u_3_01_6af2bc37177c7b14f5231f81d7378361_1a514a0b6d588ec69c135ed685759ba572" prot="public" static="no">
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">typename</ref> <ref refid="structextrait_1_1detail_1_1replace_if__impl" kindref="compound">replaceIf_impl</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">P</ref>, std::conditional_t&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">P</ref>&lt; <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Next</ref> &gt;::value !=<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Invert</ref>, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>&lt; Types..., UTypes... &gt;, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">T</ref>&lt; Types..., <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Next</ref> &gt; &gt;, <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">U</ref>&lt; UTypes... &gt;,(<ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">I</ref>+1), <ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">Invert</ref>, Types... &gt;::type</type>
        <definition>using extrait::detail::replaceIf_impl&lt; P, T&lt; Types... &gt;, U&lt; UTypes... &gt;, I, Invert, Next, Types... &gt;::type =  typename replaceIf_impl&lt;
            P,
            std::conditional_t&lt;
                P&lt;Next&gt;::value != Invert,
                T&lt;Types..., UTypes...&gt;,
                T&lt;Types..., Next&gt;
            &gt;,
            U&lt;UTypes...&gt;,
            (I + 1),
            Invert,
            Types...
        &gt;::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <qualifiedname>extrait::detail::replaceIf_impl&lt; P, T&lt; Types... &gt;, U&lt; UTypes... &gt;, I, Invert, Next, Types... &gt;::type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/detail/type_list_impl.h" line="605" column="9" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/detail/type_list_impl.h" bodystart="605" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/detail/type_list_impl.h" line="603" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/detail/type_list_impl.h" bodystart="604" bodyend="617"/>
    <listofallmembers>
      <member refid="structextrait_1_1detail_1_1replace_if__impl_3_01_p_00_01_t_3_01_t_types_8_8_8_01_4_00_01_u_3_01_6af2bc37177c7b14f5231f81d7378361_1a514a0b6d588ec69c135ed685759ba572" prot="public" virt="non-virtual"><scope>extrait::detail::replaceIf_impl&lt; P, T&lt; Types... &gt;, U&lt; UTypes... &gt;, I, Invert, Next, Types... &gt;</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
