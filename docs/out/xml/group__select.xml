<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="group__select" kind="group">
    <compoundname>select</compoundname>
    <title>extrait::select</title>
    <innerclass refid="structextrait_1_1branch" prot="public">extrait::branch</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__select_1ga837bed0c30459314db95ff17a19993de" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class ...</type>
            <declname>Branches</declname>
            <defname>Branches</defname>
          </param>
        </templateparamlist>
        <type>typename select&lt; Branches... &gt;::type</type>
        <definition>using extrait::select_t =  typename select&lt;Branches...&gt;::type</definition>
        <argsstring></argsstring>
        <name>select_t</name>
        <qualifiedname>extrait::select_t</qualifiedname>
        <briefdescription>
<para>Type helper for <ref refid="structextrait_1_1select" kindref="compound">extrait::select</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" line="193" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" bodystart="193" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Selects a type among a set of conditions. </para>
    </briefdescription>
    <detaileddescription>
<para>Evaluates a list of <ref refid="structextrait_1_1branch" kindref="compound">extrait::branch</ref> in Branches and provides a member alias &quot;type&quot; with the branch&apos;s associated type if the branch&apos;s condition parameter specified true, otherwise will continue to evaluate any remaining branches until one that is true.<linebreak/>
 If none of the given branches evaluates to true, a fallback type can be specified as the last type in list Branches, which can be any type that is not <ref refid="structextrait_1_1branch" kindref="compound">extrait::branch</ref>, if no such fallback was provided compilation will fail.</para>
<para>If at any position in list Branches (except last), is not an instantiation of type <ref refid="structextrait_1_1branch" kindref="compound">extrait::branch</ref>, compilation will fail.<linebreak/>
 Compilation will also fail if no argument was given to Branches, if list does not provide any instantiation of type <ref refid="structextrait_1_1branch" kindref="compound">extrait::branch</ref> but one element of any other type, this type will always be selected.</para>
<para>Adding custom template specialisations to this template results in undefined behaviour.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Branches</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of <ref refid="structextrait_1_1branch" kindref="compound">extrait::branch</ref> instantiations, optionally followed by one non branch type as fallback</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="structextrait_1_1assemble" kindref="compound">extrait::assemble</ref> </para>
</simplesect>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
