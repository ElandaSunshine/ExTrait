<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="structextrait_1_1select" kind="struct" language="C++" prot="public">
    <compoundname>extrait::select</compoundname>
    <basecompoundref refid="structextrait_1_1detail_1_1select" prot="public" virt="non-virtual">extrait::detail::select&lt; Branches... &gt;</basecompoundref>
    <includes refid="common_8h" local="no">common.h</includes>
    <templateparamlist>
      <param>
        <type><ref refid="common_8h_1a09e504879569026454b0aa254c56be04" kindref="member">class</ref> ...</type>
        <declname>Branches</declname>
        <defname>Branches</defname>
      </param>
    </templateparamlist>
    <briefdescription>
<para>Selects a type among a set of conditions. </para>
    </briefdescription>
    <detaileddescription>
<para>Evaluates a list of <ref refid="structextrait_1_1branch" kindref="compound">extrait::branch</ref> in Branches and provides a member alias &quot;type&quot; with the branch&apos;s associated type if the branch&apos;s condition parameter specified true, otherwise will continue to evaluate any remaining branches until one that is true.<linebreak/>
 If none of the given branches evaluates to true, a fallback type can be specified as the last type in list Branches, which can be any type that is not <ref refid="structextrait_1_1branch" kindref="compound">extrait::branch</ref>, if no such fallback was provided compilation will fail.</para>
<para>If at any position in list Branches (except last), is not an instantiation of type <ref refid="structextrait_1_1branch" kindref="compound">extrait::branch</ref>, compilation will fail.<linebreak/>
 Compilation will also fail if no argument was given to Branches, if list does not provide any instantiation of type <ref refid="structextrait_1_1branch" kindref="compound">extrait::branch</ref> but one element of any other type, this type will always be selected.</para>
<para>Adding custom template specialisations to this template results in undefined behaviour.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Branches</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of <ref refid="structextrait_1_1branch" kindref="compound">extrait::branch</ref> instantiations, optionally followed by one non branch type as fallback</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="structextrait_1_1assemble" kindref="compound">extrait::assemble</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>extrait::select&lt; Branches &gt;</label>
        <link refid="structextrait_1_1select"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>extrait::detail::select&lt; Branches... &gt;</label>
        <link refid="structextrait_1_1detail_1_1select"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>extrait::select&lt; Branches &gt;</label>
        <link refid="structextrait_1_1select"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>extrait::detail::select&lt; Branches... &gt;</label>
        <link refid="structextrait_1_1detail_1_1select"/>
      </node>
    </collaborationgraph>
    <location file="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" line="167" column="5" bodyfile="D:/Development/Coding/cpp/ExTrait/include/extrait/common.h" bodystart="167" bodyend="167"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
